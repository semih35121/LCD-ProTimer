
LCD_PROTIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004944  08004944  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800494c  0800494c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000013c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f633  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc5  00000000  00000000  0002f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  00031698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f0  00000000  00000000  00032118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217e0  00000000  00000000  00032b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df78  00000000  00000000  000542e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5ab0  00000000  00000000  00062260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127d10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ec8  00000000  00000000  00127d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004854 	.word	0x08004854

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004854 	.word	0x08004854

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <find_digit_number>:
#include "app.h"
#include <main.h>
#include <string.h>
int productive_time_taken;
int state_transition;
static find_digit_number(int time) {
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	int digit_num = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
	while (time) {
 8000584:	e00a      	b.n	800059c <find_digit_number+0x24>
		time /= 10;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <find_digit_number+0x38>)
 800058a:	fb82 1203 	smull	r1, r2, r2, r3
 800058e:	1092      	asrs	r2, r2, #2
 8000590:	17db      	asrs	r3, r3, #31
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	607b      	str	r3, [r7, #4]
		digit_num++;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
	while (time) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f1      	bne.n	8000586 <find_digit_number+0xe>
	}
	return digit_num;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	66666667 	.word	0x66666667

080005b4 <do_beep>:
void do_beep(void) {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	//do something

}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <isevent_thick>:

bool isevent_thick(tim_tick_event_signal_t *e) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	static uint32_t curr_time;
	static uint32_t curr_buzzer_time;
	bool returned_flag_status = false;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
	if ((HAL_GetTick() - curr_time) > 1000) {
 80005d0:	f001 f93c 	bl	800184c <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <isevent_thick+0x88>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005e0:	d90c      	bls.n	80005fc <isevent_thick+0x38>
		(*e).ss = 1;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2201      	movs	r2, #1
 80005e6:	605a      	str	r2, [r3, #4]
		(*e).sig_thick = TIME_TICK;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2202      	movs	r2, #2
 80005ec:	601a      	str	r2, [r3, #0]
		curr_time = HAL_GetTick();
 80005ee:	f001 f92d 	bl	800184c <HAL_GetTick>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <isevent_thick+0x88>)
 80005f6:	6013      	str	r3, [r2, #0]
		returned_flag_status = true;
 80005f8:	2301      	movs	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
	}
	if ((HAL_GetTick() - curr_buzzer_time) > 2000) {
 80005fc:	f001 f926 	bl	800184c <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <isevent_thick+0x8c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800060c:	d90c      	bls.n	8000628 <isevent_thick+0x64>
		(*e).bs = 1;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2201      	movs	r2, #1
 8000612:	609a      	str	r2, [r3, #8]
		(*e).sig_thick = BUZZER_TICK;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2203      	movs	r2, #3
 8000618:	601a      	str	r2, [r3, #0]
		curr_buzzer_time = HAL_GetTick();
 800061a:	f001 f917 	bl	800184c <HAL_GetTick>
 800061e:	4603      	mov	r3, r0
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <isevent_thick+0x8c>)
 8000622:	6013      	str	r3, [r2, #0]
		returned_flag_status = true;
 8000624:	2301      	movs	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
	}
	if ((*e).bs && (*e).ss) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d008      	beq.n	8000642 <isevent_thick+0x7e>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d004      	beq.n	8000642 <isevent_thick+0x7e>
		(*e).sig_thick = TIME_BUZ_TICK;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2206      	movs	r2, #6
 800063c:	601a      	str	r2, [r3, #0]
		return returned_flag_status;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	e000      	b.n	8000644 <isevent_thick+0x80>
	}
	return returned_flag_status;
 8000642:	7bfb      	ldrb	r3, [r7, #15]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000008c 	.word	0x2000008c
 8000650:	20000090 	.word	0x20000090

08000654 <display_event_handler>:
bool display_event_handler(uint16_t display_evt_type, uint32_t time_info) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b08e      	sub	sp, #56	; 0x38
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	80fb      	strh	r3, [r7, #6]
	switch (display_evt_type) {
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	2b04      	cmp	r3, #4
 8000664:	f200 8149 	bhi.w	80008fa <display_event_handler+0x2a6>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <display_event_handler+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000685 	.word	0x08000685
 8000674:	08000797 	.word	0x08000797
 8000678:	080007d1 	.word	0x080007d1
 800067c:	08000697 	.word	0x08000697
 8000680:	080007d9 	.word	0x080007d9
	case DISP_PAUSED: {
		lcd_put_cur(0, 4);//set_display_cursor(x, y); //PAUSED mesajı ilgili cursorda ayarlanması sağlanacak
 8000684:	2104      	movs	r1, #4
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fcc9 	bl	800101e <lcd_put_cur>
		lcd_send_string("PAUSED\n");				//display_message("PAUSED\n");
 800068c:	489d      	ldr	r0, [pc, #628]	; (8000904 <display_event_handler+0x2b0>)
 800068e:	f000 fce5 	bl	800105c <lcd_send_string>
		return true;
 8000692:	2301      	movs	r3, #1
 8000694:	e131      	b.n	80008fa <display_event_handler+0x2a6>
	}
	case DISP_SHOW_TIME: {
		lcd_put_cur(1,4);				//set_display_cursor(x, y); //Anlık zaman verisinin yazılacağı pozisiyon ayarlaması yapıldı
 8000696:	2104      	movs	r1, #4
 8000698:	2001      	movs	r0, #1
 800069a:	f000 fcc0 	bl	800101e <lcd_put_cur>
		uint32_t current_time_minutes = time_info / 60;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	4a99      	ldr	r2, [pc, #612]	; (8000908 <display_event_handler+0x2b4>)
 80006a2:	fba2 2303 	umull	r2, r3, r2, r3
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t current_time_second = time_info % 60;
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	4b96      	ldr	r3, [pc, #600]	; (8000908 <display_event_handler+0x2b4>)
 80006ae:	fba3 1302 	umull	r1, r3, r3, r2
 80006b2:	0959      	lsrs	r1, r3, #5
 80006b4:	460b      	mov	r3, r1
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
		char written_buffer[6] = { 0 };
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	2300      	movs	r3, #0
 80006c6:	843b      	strh	r3, [r7, #32]
		uint8_t digit_num_min = find_digit_number(current_time_minutes);
 80006c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff54 	bl	8000578 <find_digit_number>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t digit_number_sec = find_digit_number(current_time_second);
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff4d 	bl	8000578 <find_digit_number>
 80006de:	4603      	mov	r3, r0
 80006e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		if (digit_num_min == 1 && digit_number_sec == 1)
 80006e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10b      	bne.n	8000704 <display_event_handler+0xb0>
 80006ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d107      	bne.n	8000704 <display_event_handler+0xb0>
			sprintf(written_buffer, "0%d:0%d", current_time_minutes,
 80006f4:	f107 001c 	add.w	r0, r7, #28
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006fc:	4983      	ldr	r1, [pc, #524]	; (800090c <display_event_handler+0x2b8>)
 80006fe:	f003 fd35 	bl	800416c <siprintf>
 8000702:	e041      	b.n	8000788 <display_event_handler+0x134>
					current_time_second);
		else if (digit_num_min == 2 && digit_number_sec == 1)
 8000704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000708:	2b02      	cmp	r3, #2
 800070a:	d10b      	bne.n	8000724 <display_event_handler+0xd0>
 800070c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000710:	2b01      	cmp	r3, #1
 8000712:	d107      	bne.n	8000724 <display_event_handler+0xd0>
			sprintf(written_buffer, "%d:0%d", current_time_minutes,
 8000714:	f107 001c 	add.w	r0, r7, #28
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	497c      	ldr	r1, [pc, #496]	; (8000910 <display_event_handler+0x2bc>)
 800071e:	f003 fd25 	bl	800416c <siprintf>
 8000722:	e031      	b.n	8000788 <display_event_handler+0x134>
					current_time_second);
		else if (digit_num_min == 1 && digit_number_sec == 2)
 8000724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000728:	2b01      	cmp	r3, #1
 800072a:	d10b      	bne.n	8000744 <display_event_handler+0xf0>
 800072c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000730:	2b02      	cmp	r3, #2
 8000732:	d107      	bne.n	8000744 <display_event_handler+0xf0>
			sprintf(written_buffer, "0%d:%d", current_time_minutes,
 8000734:	f107 001c 	add.w	r0, r7, #28
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800073c:	4975      	ldr	r1, [pc, #468]	; (8000914 <display_event_handler+0x2c0>)
 800073e:	f003 fd15 	bl	800416c <siprintf>
 8000742:	e021      	b.n	8000788 <display_event_handler+0x134>
					current_time_second);
		else if (digit_num_min == 2 && digit_number_sec == 2)
 8000744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000748:	2b02      	cmp	r3, #2
 800074a:	d10b      	bne.n	8000764 <display_event_handler+0x110>
 800074c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000750:	2b02      	cmp	r3, #2
 8000752:	d107      	bne.n	8000764 <display_event_handler+0x110>
			sprintf(written_buffer, "%d:%d", current_time_minutes,
 8000754:	f107 001c 	add.w	r0, r7, #28
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800075c:	496e      	ldr	r1, [pc, #440]	; (8000918 <display_event_handler+0x2c4>)
 800075e:	f003 fd05 	bl	800416c <siprintf>
 8000762:	e011      	b.n	8000788 <display_event_handler+0x134>
					current_time_second);
		else if (digit_num_min == 0 && digit_number_sec == 0)
 8000764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10b      	bne.n	8000784 <display_event_handler+0x130>
 800076c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000770:	2b00      	cmp	r3, #0
 8000772:	d107      	bne.n	8000784 <display_event_handler+0x130>
			sprintf(written_buffer, "0%d:0%d", 0, 0);
 8000774:	f107 001c 	add.w	r0, r7, #28
 8000778:	2300      	movs	r3, #0
 800077a:	2200      	movs	r2, #0
 800077c:	4963      	ldr	r1, [pc, #396]	; (800090c <display_event_handler+0x2b8>)
 800077e:	f003 fcf5 	bl	800416c <siprintf>
 8000782:	e001      	b.n	8000788 <display_event_handler+0x134>
		else
			return false;
 8000784:	2300      	movs	r3, #0
 8000786:	e0b8      	b.n	80008fa <display_event_handler+0x2a6>
		lcd_send_string(written_buffer);				//display_message(written_buffer);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fc65 	bl	800105c <lcd_send_string>
		return true;
 8000792:	2301      	movs	r3, #1
 8000794:	e0b1      	b.n	80008fa <display_event_handler+0x2a6>
	}
	case DISP_SET_TIME: {
		lcd_put_cur(0, 4);						//set_display_cursor(x, y); //İLGİLİ SET TİME YAZISININ pozisyon ayarlaması yapılacak
 8000796:	2104      	movs	r1, #4
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fc40 	bl	800101e <lcd_put_cur>
		lcd_send_string("SET_TIME");		//display_message("SET_TIME");
 800079e:	485f      	ldr	r0, [pc, #380]	; (800091c <display_event_handler+0x2c8>)
 80007a0:	f000 fc5c 	bl	800105c <lcd_send_string>
		lcd_put_cur(1, 4); // Zaman Ayarlamasının yazılcağı yer
 80007a4:	2104      	movs	r1, #4
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 fc39 	bl	800101e <lcd_put_cur>
		char written_buffer[6] = { 0 };
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	2300      	movs	r3, #0
 80007b2:	833b      	strh	r3, [r7, #24]
		sprintf(written_buffer, "%0d:%0d", 0, 0);
 80007b4:	f107 0014 	add.w	r0, r7, #20
 80007b8:	2300      	movs	r3, #0
 80007ba:	2200      	movs	r2, #0
 80007bc:	4958      	ldr	r1, [pc, #352]	; (8000920 <display_event_handler+0x2cc>)
 80007be:	f003 fcd5 	bl	800416c <siprintf>
		lcd_send_string(written_buffer);//display_message(written_buffer);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fc48 	bl	800105c <lcd_send_string>
		return true;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e094      	b.n	80008fa <display_event_handler+0x2a6>

	}
	case DISP_CLEAR: {
		lcd_clear();		//display_clear();
 80007d0:	f000 fc0e 	bl	8000ff0 <lcd_clear>
		return true;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e090      	b.n	80008fa <display_event_handler+0x2a6>
	}
	case DISP_SHOW_PRODUCTIVE_TIME: {
		if (!productive_time_taken) {
 80007d8:	4b52      	ldr	r3, [pc, #328]	; (8000924 <display_event_handler+0x2d0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f040 808a 	bne.w	80008f6 <display_event_handler+0x2a2>
			uint32_t current_time_minutes = time_info / 60;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	4a48      	ldr	r2, [pc, #288]	; (8000908 <display_event_handler+0x2b4>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
			uint32_t current_time_second = time_info % 60;
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	4b45      	ldr	r3, [pc, #276]	; (8000908 <display_event_handler+0x2b4>)
 80007f2:	fba3 1302 	umull	r1, r3, r3, r2
 80007f6:	0959      	lsrs	r1, r3, #5
 80007f8:	460b      	mov	r3, r1
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	1a5b      	subs	r3, r3, r1
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
			uint8_t digit_num_min = find_digit_number(current_time_minutes);
 8000804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff feb6 	bl	8000578 <find_digit_number>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t digit_number_sec = find_digit_number(current_time_second);
 8000812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff feaf 	bl	8000578 <find_digit_number>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			lcd_put_cur(0, 4);				//set_display_cursor(x, y); //İLGİLİ Productive_TIME YAZISININ pozisyon ayarlaması yapılacak
 8000820:	2104      	movs	r1, #4
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fbfb 	bl	800101e <lcd_put_cur>
			lcd_send_string("Productive_Time");						//display_message("Productive_TIME");
 8000828:	483f      	ldr	r0, [pc, #252]	; (8000928 <display_event_handler+0x2d4>)
 800082a:	f000 fc17 	bl	800105c <lcd_send_string>
			lcd_put_cur(1, 4);				//set_display_cursor(x, y); // Zaman Ayarlamasının yazılcağı yer
 800082e:	2104      	movs	r1, #4
 8000830:	2001      	movs	r0, #1
 8000832:	f000 fbf4 	bl	800101e <lcd_put_cur>
			char written_buffer[6] = { 0 };
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	2300      	movs	r3, #0
 800083c:	823b      	strh	r3, [r7, #16]
			if (digit_num_min == 1 && digit_number_sec == 1)
 800083e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10b      	bne.n	800085e <display_event_handler+0x20a>
 8000846:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800084a:	2b01      	cmp	r3, #1
 800084c:	d107      	bne.n	800085e <display_event_handler+0x20a>
				sprintf(written_buffer, "0%d:0%d", current_time_minutes,
 800084e:	f107 000c 	add.w	r0, r7, #12
 8000852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000856:	492d      	ldr	r1, [pc, #180]	; (800090c <display_event_handler+0x2b8>)
 8000858:	f003 fc88 	bl	800416c <siprintf>
 800085c:	e041      	b.n	80008e2 <display_event_handler+0x28e>
						current_time_second);
			else if (digit_num_min == 2 && digit_number_sec == 1)
 800085e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000862:	2b02      	cmp	r3, #2
 8000864:	d10b      	bne.n	800087e <display_event_handler+0x22a>
 8000866:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800086a:	2b01      	cmp	r3, #1
 800086c:	d107      	bne.n	800087e <display_event_handler+0x22a>
				sprintf(written_buffer, "%d:0%d", current_time_minutes,
 800086e:	f107 000c 	add.w	r0, r7, #12
 8000872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000876:	4926      	ldr	r1, [pc, #152]	; (8000910 <display_event_handler+0x2bc>)
 8000878:	f003 fc78 	bl	800416c <siprintf>
 800087c:	e031      	b.n	80008e2 <display_event_handler+0x28e>
						current_time_second);
			else if (digit_num_min == 1 && digit_number_sec == 2)
 800087e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000882:	2b01      	cmp	r3, #1
 8000884:	d10b      	bne.n	800089e <display_event_handler+0x24a>
 8000886:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800088a:	2b02      	cmp	r3, #2
 800088c:	d107      	bne.n	800089e <display_event_handler+0x24a>
				sprintf(written_buffer, "0%d:%d", current_time_minutes,
 800088e:	f107 000c 	add.w	r0, r7, #12
 8000892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000896:	491f      	ldr	r1, [pc, #124]	; (8000914 <display_event_handler+0x2c0>)
 8000898:	f003 fc68 	bl	800416c <siprintf>
 800089c:	e021      	b.n	80008e2 <display_event_handler+0x28e>
						current_time_second);
			else if (digit_num_min == 2 && digit_number_sec == 2)
 800089e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d10b      	bne.n	80008be <display_event_handler+0x26a>
 80008a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d107      	bne.n	80008be <display_event_handler+0x26a>
				sprintf(written_buffer, "%d:%d", current_time_minutes,
 80008ae:	f107 000c 	add.w	r0, r7, #12
 80008b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008b6:	4918      	ldr	r1, [pc, #96]	; (8000918 <display_event_handler+0x2c4>)
 80008b8:	f003 fc58 	bl	800416c <siprintf>
 80008bc:	e011      	b.n	80008e2 <display_event_handler+0x28e>
						current_time_second);
			else if (digit_num_min == 0 && digit_number_sec == 0)
 80008be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10b      	bne.n	80008de <display_event_handler+0x28a>
 80008c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d107      	bne.n	80008de <display_event_handler+0x28a>
				sprintf(written_buffer, "0%d:0%d", 0, 0);
 80008ce:	f107 000c 	add.w	r0, r7, #12
 80008d2:	2300      	movs	r3, #0
 80008d4:	2200      	movs	r2, #0
 80008d6:	490d      	ldr	r1, [pc, #52]	; (800090c <display_event_handler+0x2b8>)
 80008d8:	f003 fc48 	bl	800416c <siprintf>
 80008dc:	e001      	b.n	80008e2 <display_event_handler+0x28e>
			else
				return false;
 80008de:	2300      	movs	r3, #0
 80008e0:	e00b      	b.n	80008fa <display_event_handler+0x2a6>
			lcd_send_string(written_buffer);				//display_message(written_buffer);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fbb8 	bl	800105c <lcd_send_string>
			productive_time_taken++;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <display_event_handler+0x2d0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <display_event_handler+0x2d0>)
 80008f4:	6013      	str	r3, [r2, #0]
		}
		return true;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e7ff      	b.n	80008fa <display_event_handler+0x2a6>

	}

	}

}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3738      	adds	r7, #56	; 0x38
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	0800486c 	.word	0x0800486c
 8000908:	88888889 	.word	0x88888889
 800090c:	08004874 	.word	0x08004874
 8000910:	0800487c 	.word	0x0800487c
 8000914:	08004884 	.word	0x08004884
 8000918:	0800488c 	.word	0x0800488c
 800091c:	08004894 	.word	0x08004894
 8000920:	080048a0 	.word	0x080048a0
 8000924:	200000a8 	.word	0x200000a8
 8000928:	080048a8 	.word	0x080048a8

0800092c <copy_button_evt_to_general_evt>:

void copy_button_evt_to_general_evt(protimer_button_event_t *evt,
		pro_timer_general_event_t *general_evt) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	evt=&((*general_evt).super);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	607b      	str	r3, [r7, #4]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <copy_tick_info_to_general_struct>:
void copy_tick_info_to_general_struct(tim_tick_event_signal_t *time_signal,
		pro_timer_general_event_t *general_evt) {
 8000946:	b490      	push	{r4, r7}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
	general_evt->super_thick = *(time_signal);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	1d1c      	adds	r4, r3, #4
 8000956:	4613      	mov	r3, r2
 8000958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bc90      	pop	{r4, r7}
 8000966:	4770      	bx	lr

08000968 <protimer_state_handler_idle>:

void protimer_state_handler_idle(protimer_t *mobj, pro_timer_general_event_t *e) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	; 0x70
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]

	if (!(e->super_thick.is_time_idle)) {
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d12e      	bne.n	80009d8 <protimer_state_handler_idle+0x70>
		static int buzzer_cnt;
		switch (e->super_thick.sig_thick) {
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2b06      	cmp	r3, #6
 8000980:	d12c      	bne.n	80009dc <protimer_state_handler_idle+0x74>
		case TIME_BUZ_TICK:
			do_beep();
 8000982:	f7ff fe17 	bl	80005b4 <do_beep>
			if (buzzer_cnt++ > 60) {
 8000986:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <protimer_state_handler_idle+0xec>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	4931      	ldr	r1, [pc, #196]	; (8000a54 <protimer_state_handler_idle+0xec>)
 800098e:	600a      	str	r2, [r1, #0]
 8000990:	2b3c      	cmp	r3, #60	; 0x3c
 8000992:	dd25      	ble.n	80009e0 <protimer_state_handler_idle+0x78>
				char written_data[100] = "";
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2260      	movs	r2, #96	; 0x60
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 fb21 	bl	8003fe8 <memset>
				sprintf(written_data, "%s%d",
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <protimer_state_handler_idle+0xec>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f107 0008 	add.w	r0, r7, #8
 80009ae:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <protimer_state_handler_idle+0xf0>)
 80009b0:	492a      	ldr	r1, [pc, #168]	; (8000a5c <protimer_state_handler_idle+0xf4>)
 80009b2:	f003 fbdb 	bl	800416c <siprintf>
						"Herhangi bir islem yapmadiniz lutfen islem yapiniz\r\n",
						buzzer_cnt);
				HAL_UART_Transmit(&huart1, (uint8_t*) written_data,
						strlen(written_data), 100);
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fc08 	bl	80001d0 <strlen>
 80009c0:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) written_data,
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f107 0108 	add.w	r1, r7, #8
 80009c8:	2364      	movs	r3, #100	; 0x64
 80009ca:	4825      	ldr	r0, [pc, #148]	; (8000a60 <protimer_state_handler_idle+0xf8>)
 80009cc:	f002 fbc7 	bl	800315e <HAL_UART_Transmit>
				buzzer_cnt = 0;
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <protimer_state_handler_idle+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
			}

			break;
 80009d6:	e003      	b.n	80009e0 <protimer_state_handler_idle+0x78>
		default:
			break;
		}

	}
 80009d8:	bf00      	nop
 80009da:	e002      	b.n	80009e2 <protimer_state_handler_idle+0x7a>
			break;
 80009dc:	bf00      	nop
 80009de:	e000      	b.n	80009e2 <protimer_state_handler_idle+0x7a>
			break;
 80009e0:	bf00      	nop
	uint8_t coming_signal = e->super.sig;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (((*e).super.is_button_pressed)) {
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	785b      	ldrb	r3, [r3, #1]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d01f      	beq.n	8000a32 <protimer_state_handler_idle+0xca>
		switch (coming_signal) //Button Eventten gelen sinyaldir
 80009f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <protimer_state_handler_idle+0x98>
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d00a      	beq.n	8000a14 <protimer_state_handler_idle+0xac>
			mobj->active_state = STAT;
			break;
		}

		default:
			break;
 80009fe:	e00d      	b.n	8000a1c <protimer_state_handler_idle+0xb4>
			mobj->curr_time += 60;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	601a      	str	r2, [r3, #0]
			mobj->active_state = TIME_SET;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	731a      	strb	r2, [r3, #12]
			break;
 8000a12:	e003      	b.n	8000a1c <protimer_state_handler_idle+0xb4>
			mobj->active_state = STAT;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2204      	movs	r2, #4
 8000a18:	731a      	strb	r2, [r3, #12]
			break;
 8000a1a:	bf00      	nop
		}
		e->super.is_button_pressed=0;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	705a      	strb	r2, [r3, #1]
		mobj->display_info_msg(DISP_CLEAR,mobj->curr_time);//display_clear();
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	6812      	ldr	r2, [r2, #0]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	4798      	blx	r3
		mobj->elapsed_time = 0;
		mobj->display_info_msg(DISP_SET_TIME,mobj->curr_time);
	}


}
 8000a30:	e00c      	b.n	8000a4c <protimer_state_handler_idle+0xe4>
		mobj->curr_time = 0;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
		mobj->elapsed_time = 0;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
		mobj->display_info_msg(DISP_SET_TIME,mobj->curr_time);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	4611      	mov	r1, r2
 8000a48:	2001      	movs	r0, #1
 8000a4a:	4798      	blx	r3
}
 8000a4c:	bf00      	nop
 8000a4e:	3770      	adds	r7, #112	; 0x70
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000094 	.word	0x20000094
 8000a58:	080048b8 	.word	0x080048b8
 8000a5c:	080048f0 	.word	0x080048f0
 8000a60:	2000010c 	.word	0x2000010c

08000a64 <protimer_state_handler_timeset>:
void protimer_state_handler_timeset(protimer_t *mobj,
		pro_timer_general_event_t *e) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	uint8_t coming_signal = e->super.sig;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	73fb      	strb	r3, [r7, #15]
	if (!(e->super.is_button_pressed)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d106      	bne.n	8000a8a <protimer_state_handler_timeset+0x26>
			/*|| (!((coming_signal == ABRT) || (coming_signal == START_PAUSE)))*/) {
			mobj->display_info_msg(DISP_SHOW_TIME,mobj->curr_time);				//display_time(mobj->curr_time);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	4611      	mov	r1, r2
 8000a86:	2003      	movs	r0, #3
 8000a88:	4798      	blx	r3
	}
	if (e->super.is_button_pressed) {
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d05a      	beq.n	8000b48 <protimer_state_handler_timeset+0xe4>
		switch (e->super.sig) {
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	d853      	bhi.n	8000b42 <protimer_state_handler_timeset+0xde>
 8000a9a:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <protimer_state_handler_timeset+0x3c>)
 8000a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa0:	08000ab9 	.word	0x08000ab9
 8000aa4:	08000ad5 	.word	0x08000ad5
 8000aa8:	08000b43 	.word	0x08000b43
 8000aac:	08000b43 	.word	0x08000b43
 8000ab0:	08000b25 	.word	0x08000b25
 8000ab4:	08000b0f 	.word	0x08000b0f
		case INC_TIME:
			mobj->curr_time += 60;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]

			mobj->display_info_msg(DISP_SHOW_TIME,mobj->curr_time)	;//display_time(mobj->curr_time);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	4611      	mov	r1, r2
 8000ace:	2003      	movs	r0, #3
 8000ad0:	4798      	blx	r3
			break;
 8000ad2:	e036      	b.n	8000b42 <protimer_state_handler_timeset+0xde>

		case DEC_TIME:
			if (mobj->curr_time >= 60) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b3b      	cmp	r3, #59	; 0x3b
 8000ada:	d90d      	bls.n	8000af8 <protimer_state_handler_timeset+0x94>
				mobj->curr_time -= 60;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
				mobj->display_info_msg(DISP_SHOW_TIME,mobj->curr_time);//display_time(mobj->curr_time);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	4611      	mov	r1, r2
 8000af2:	2003      	movs	r0, #3
 8000af4:	4798      	blx	r3

			} else {
				mobj->display_info_msg(DISP_SHOW_TIME,mobj->curr_time=0)	;//display_time(0);

			}
			break;
 8000af6:	e024      	b.n	8000b42 <protimer_state_handler_timeset+0xde>
				mobj->display_info_msg(DISP_SHOW_TIME,mobj->curr_time=0)	;//display_time(0);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	2100      	movs	r1, #0
 8000b00:	6011      	str	r1, [r2, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	6812      	ldr	r2, [r2, #0]
 8000b06:	4611      	mov	r1, r2
 8000b08:	2003      	movs	r0, #3
 8000b0a:	4798      	blx	r3
			break;
 8000b0c:	e019      	b.n	8000b42 <protimer_state_handler_timeset+0xde>
		case ABRT:
			mobj->active_state = IDLE;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	731a      	strb	r2, [r3, #12]
			mobj->display_info_msg(DISP_CLEAR,mobj->curr_time);//display_clear();
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	2002      	movs	r0, #2
 8000b20:	4798      	blx	r3
			break;
 8000b22:	e00e      	b.n	8000b42 <protimer_state_handler_timeset+0xde>
		case START_PAUSE:
			if (mobj->curr_time >= 60){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b3b      	cmp	r3, #59	; 0x3b
 8000b2a:	d909      	bls.n	8000b40 <protimer_state_handler_timeset+0xdc>
				mobj->active_state = COUNTDOWN;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2202      	movs	r2, #2
 8000b30:	731a      	strb	r2, [r3, #12]
				mobj->display_info_msg(DISP_CLEAR,mobj->curr_time);//display_clear(); //TO İMPLEMENT EXIT ACTION
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	4798      	blx	r3

			}
			break;
 8000b40:	bf00      	nop
		}
		e->super.is_button_pressed=0;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	705a      	strb	r2, [r3, #1]

	/*if (((coming_signal == ABRT) || (coming_signal == START_PAUSE))) {
		mobj->display_info_msg(DISP_CLEAR,mobj->curr_time);//display_clear(); //TO İMPLEMENT EXIT ACTION
	}*/

}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <protimer_state_handler_countdown>:

void protimer_state_handler_countdown(protimer_t *mobj,
		pro_timer_general_event_t *e) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	if (!(e->super_thick.is_time_idle)) {
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d158      	bne.n	8000c14 <protimer_state_handler_countdown+0xc4>
		switch (e->super_thick.sig_thick) {
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d002      	beq.n	8000b70 <protimer_state_handler_countdown+0x20>
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d029      	beq.n	8000bc2 <protimer_state_handler_countdown+0x72>
 8000b6e:	e051      	b.n	8000c14 <protimer_state_handler_countdown+0xc4>
		case TIME_TICK:
			--mobj->curr_time;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
			++mobj->elapsed_time;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	605a      	str	r2, [r3, #4]
			mobj->display_info_msg(DISP_SHOW_TIME,mobj->curr_time);//display_time(mobj->curr_time);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	2003      	movs	r0, #3
 8000b90:	4798      	blx	r3
			if (mobj->curr_time == 0) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d113      	bne.n	8000bc2 <protimer_state_handler_countdown+0x72>
				mobj->active_state = IDLE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	731a      	strb	r2, [r3, #12]
				mobj->pro_time += mobj->elapsed_time;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	441a      	add	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	609a      	str	r2, [r3, #8]
				mobj->elapsed_time = 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
				mobj->display_info_msg(DISP_CLEAR,mobj->curr_time);//display_time(mobj->curr_time);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	4798      	blx	r3

			}

		case TIME_BUZ_TICK:
			--mobj->curr_time;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	601a      	str	r2, [r3, #0]
			++mobj->elapsed_time;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	605a      	str	r2, [r3, #4]
			mobj->display_info_msg(DISP_SHOW_TIME,mobj->curr_time)	;//display_time(mobj->curr_time);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	4611      	mov	r1, r2
 8000be0:	2003      	movs	r0, #3
 8000be2:	4798      	blx	r3
			if (mobj->curr_time == 0) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d113      	bne.n	8000c14 <protimer_state_handler_countdown+0xc4>
				mobj->active_state = IDLE;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	731a      	strb	r2, [r3, #12]
				mobj->pro_time += mobj->elapsed_time;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
				mobj->elapsed_time = 0;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
				mobj->display_info_msg(DISP_CLEAR,mobj->curr_time);//display_time(mobj->curr_time);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6812      	ldr	r2, [r2, #0]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	2002      	movs	r0, #2
 8000c12:	4798      	blx	r3

			}
		}

	}
	if (e->super.is_button_pressed) {
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d01c      	beq.n	8000c56 <protimer_state_handler_countdown+0x106>
			switch ((*e).super.sig) {
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d00b      	beq.n	8000c3c <protimer_state_handler_countdown+0xec>
 8000c24:	2b05      	cmp	r3, #5
 8000c26:	d113      	bne.n	8000c50 <protimer_state_handler_countdown+0x100>
				case ABRT:{
					mobj->active_state=IDLE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	731a      	strb	r2, [r3, #12]
					mobj->display_info_msg(DISP_CLEAR,mobj->curr_time);//display_time(mobj->curr_time);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	4611      	mov	r1, r2
 8000c38:	2002      	movs	r0, #2
 8000c3a:	4798      	blx	r3

				}
				case START_PAUSE:{
					mobj->active_state=PAUSE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	731a      	strb	r2, [r3, #12]
					mobj->display_info_msg(DISP_CLEAR,mobj->curr_time);//display_time(mobj->curr_time);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	4798      	blx	r3

				}
			}
			e->super.is_button_pressed=0;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	705a      	strb	r2, [r3, #1]
	}
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <protimer_state_handler_pause>:
void protimer_state_handler_pause(protimer_t *mobj,
		pro_timer_general_event_t *e) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
	if (e->super.is_button_pressed) {
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d057      	beq.n	8000d22 <protimer_state_handler_pause+0xc2>
		switch ((*e).super.sig) {
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b05      	cmp	r3, #5
 8000c78:	d850      	bhi.n	8000d1c <protimer_state_handler_pause+0xbc>
 8000c7a:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <protimer_state_handler_pause+0x20>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000c99 	.word	0x08000c99
 8000c84:	08000cbb 	.word	0x08000cbb
 8000c88:	08000d1d 	.word	0x08000d1d
 8000c8c:	08000d1d 	.word	0x08000d1d
 8000c90:	08000d07 	.word	0x08000d07
 8000c94:	08000cf1 	.word	0x08000cf1
		case INC_TIME: {
			mobj->curr_time += 60;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	601a      	str	r2, [r3, #0]
			mobj->active_state = TIME_SET;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	731a      	strb	r2, [r3, #12]
			mobj->display_info_msg(DISP_CLEAR,mobj->curr_time)	;//display_clear();
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	4798      	blx	r3
			return;
 8000cb8:	e03a      	b.n	8000d30 <protimer_state_handler_pause+0xd0>
		}
		case DEC_TIME: {
			if (mobj->curr_time >= 60)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b3b      	cmp	r3, #59	; 0x3b
 8000cc0:	d906      	bls.n	8000cd0 <protimer_state_handler_pause+0x70>
				mobj->curr_time -= 60;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
				mobj->curr_time = 0;
				do_beep();
				mobj->active_state = TIME_SET;
				mobj->display_info_msg(DISP_CLEAR,mobj->curr_time)	;//display_clear();
			}
			return;
 8000cce:	e02f      	b.n	8000d30 <protimer_state_handler_pause+0xd0>
				mobj->curr_time = 0;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
				do_beep();
 8000cd6:	f7ff fc6d 	bl	80005b4 <do_beep>
				mobj->active_state = TIME_SET;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	731a      	strb	r2, [r3, #12]
				mobj->display_info_msg(DISP_CLEAR,mobj->curr_time)	;//display_clear();
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	2002      	movs	r0, #2
 8000cec:	4798      	blx	r3
			return;
 8000cee:	e01f      	b.n	8000d30 <protimer_state_handler_pause+0xd0>
		}
		case ABRT: {
			mobj->active_state = IDLE;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	731a      	strb	r2, [r3, #12]
			mobj->display_info_msg(DISP_CLEAR,mobj->curr_time)	;//display_clear();
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	2002      	movs	r0, #2
 8000d02:	4798      	blx	r3
			return;
 8000d04:	e014      	b.n	8000d30 <protimer_state_handler_pause+0xd0>
		}
		case START_PAUSE: {
			mobj->active_state = COUNTDOWN;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2202      	movs	r2, #2
 8000d0a:	731a      	strb	r2, [r3, #12]
			mobj->display_info_msg(DISP_CLEAR,mobj->curr_time)	;//display_clear();
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	4611      	mov	r1, r2
 8000d16:	2002      	movs	r0, #2
 8000d18:	4798      	blx	r3
			return;
 8000d1a:	e009      	b.n	8000d30 <protimer_state_handler_pause+0xd0>
		}
		}
		e->super.is_button_pressed=0;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	705a      	strb	r2, [r3, #1]

	}

	mobj->display_info_msg(DISP_PAUSED,mobj->curr_time)	;//display_message("PAUSED\n");
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	4798      	blx	r3



}
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop

08000d38 <protimer_state_handler_stat>:
void protimer_state_handler_stat(protimer_t *mobj, pro_timer_general_event_t *e) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	if (e->super_thick.is_time_idle) {
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <protimer_state_handler_stat+0x22>
		mobj->display_info_msg(DISP_SHOW_PRODUCTIVE_TIME,mobj->pro_time);		//display_message("Productive Time");
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	6892      	ldr	r2, [r2, #8]
 8000d52:	4611      	mov	r1, r2
 8000d54:	2004      	movs	r0, #4
 8000d56:	4798      	blx	r3
		mobj->active_state = IDLE;
		productive_time_taken = 0;
		mobj->display_info_msg(DISP_CLEAR,mobj->curr_time)	;//display_clear();
	}

}
 8000d58:	e018      	b.n	8000d8c <protimer_state_handler_stat+0x54>
	} else if (!(e->super_thick.is_time_idle)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d114      	bne.n	8000d8c <protimer_state_handler_stat+0x54>
			&& (e->super_thick.sig_thick == TIME_TICK
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d003      	beq.n	8000d72 <protimer_state_handler_stat+0x3a>
					|| e->super_thick.sig_thick == TIME_BUZ_TICK)) {
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d10c      	bne.n	8000d8c <protimer_state_handler_stat+0x54>
		mobj->active_state = IDLE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	731a      	strb	r2, [r3, #12]
		productive_time_taken = 0;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <protimer_state_handler_stat+0x5c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
		mobj->display_info_msg(DISP_CLEAR,mobj->curr_time)	;//display_clear();
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	4611      	mov	r1, r2
 8000d88:	2002      	movs	r0, #2
 8000d8a:	4798      	blx	r3
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000a8 	.word	0x200000a8

08000d98 <btn_event_handler>:

void btn_event_handler(uint16_t GPIO_Pin, protimer_button_event_t *timtick_evt) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
	int current_time = HAL_GetTick();
 8000da4:	f000 fd52 	bl	800184c <HAL_GetTick>
 8000da8:	4603      	mov	r3, r0
 8000daa:	617b      	str	r3, [r7, #20]
	bool is_pressed_second_button = true;
 8000dac:	2301      	movs	r3, #1
 8000dae:	74fb      	strb	r3, [r7, #19]
	int time_origin = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
	int second_button_pressed_timeout = 1000; //1000ms içinde basılmaz ise kendi state'i içinde kalacak
 8000db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db8:	60bb      	str	r3, [r7, #8]

	switch (GPIO_Pin) {
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	2b10      	cmp	r3, #16
 8000dbe:	d056      	beq.n	8000e6e <btn_event_handler+0xd6>
 8000dc0:	2b10      	cmp	r3, #16
 8000dc2:	dc5a      	bgt.n	8000e7a <btn_event_handler+0xe2>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d00a      	beq.n	8000dde <btn_event_handler+0x46>
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d030      	beq.n	8000e2e <btn_event_handler+0x96>
 8000dcc:	e055      	b.n	8000e7a <btn_event_handler+0xe2>
	case GPIO_PIN_0:
		while (((is_pressed_second_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
				== true)) {
			if ((HAL_GetTick() - current_time) > second_button_pressed_timeout)
 8000dce:	f000 fd3d 	bl	800184c <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d80d      	bhi.n	8000dfa <btn_event_handler+0x62>
		while (((is_pressed_second_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000dde:	2102      	movs	r1, #2
 8000de0:	482a      	ldr	r0, [pc, #168]	; (8000e8c <btn_event_handler+0xf4>)
 8000de2:	f001 f87f 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf14      	ite	ne
 8000dec:	2301      	movne	r3, #1
 8000dee:	2300      	moveq	r3, #0
 8000df0:	74fb      	strb	r3, [r7, #19]
 8000df2:	7cfb      	ldrb	r3, [r7, #19]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1ea      	bne.n	8000dce <btn_event_handler+0x36>
 8000df8:	e000      	b.n	8000dfc <btn_event_handler+0x64>
				break;
 8000dfa:	bf00      	nop
		}
		if (is_pressed_second_button == false)
 8000dfc:	7cfb      	ldrb	r3, [r7, #19]
 8000dfe:	f083 0301 	eor.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <btn_event_handler+0x78>
			timtick_evt->sig = ABRT;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e002      	b.n	8000e16 <btn_event_handler+0x7e>
		else
			timtick_evt->sig = INC_TIME;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
		timtick_evt->is_button_pressed = 1;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	705a      	strb	r2, [r3, #1]
		break;
 8000e1c:	e031      	b.n	8000e82 <btn_event_handler+0xea>
	case GPIO_PIN_1:
		while (((is_pressed_second_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
				== true)) {
			if ((HAL_GetTick() - current_time) > second_button_pressed_timeout)
 8000e1e:	f000 fd15 	bl	800184c <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d80d      	bhi.n	8000e4a <btn_event_handler+0xb2>
		while (((is_pressed_second_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4816      	ldr	r0, [pc, #88]	; (8000e8c <btn_event_handler+0xf4>)
 8000e32:	f001 f857 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf14      	ite	ne
 8000e3c:	2301      	movne	r3, #1
 8000e3e:	2300      	moveq	r3, #0
 8000e40:	74fb      	strb	r3, [r7, #19]
 8000e42:	7cfb      	ldrb	r3, [r7, #19]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1ea      	bne.n	8000e1e <btn_event_handler+0x86>
 8000e48:	e000      	b.n	8000e4c <btn_event_handler+0xb4>
				break;
 8000e4a:	bf00      	nop
		}
		if (is_pressed_second_button == false)
 8000e4c:	7cfb      	ldrb	r3, [r7, #19]
 8000e4e:	f083 0301 	eor.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <btn_event_handler+0xc8>
			timtick_evt->sig = ABRT;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e002      	b.n	8000e66 <btn_event_handler+0xce>
		else
			timtick_evt->sig = START_PAUSE;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2204      	movs	r2, #4
 8000e64:	701a      	strb	r2, [r3, #0]

		timtick_evt->is_button_pressed = 1;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	705a      	strb	r2, [r3, #1]

		break;
 8000e6c:	e009      	b.n	8000e82 <btn_event_handler+0xea>
	case GPIO_PIN_4:
		timtick_evt->sig = DEC_TIME;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
		timtick_evt->is_button_pressed = 1;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	705a      	strb	r2, [r3, #1]

	default:
		timtick_evt->is_button_pressed = 0;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	705a      	strb	r2, [r3, #1]
		break;
 8000e80:	bf00      	nop
	}

}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020000 	.word	0x40020000

08000e90 <pro_timer_init>:
	protimer_t *mobj;
	if ((mobj = ((protimer_t*) malloc(sizeof(protimer_t)))) == NULL)
		return NULL;
	return mobj;
}
void pro_timer_init(protimer_t *mobj) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	(*mobj).pro_time = 0;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
	(*mobj).active_state = IDLE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	731a      	strb	r2, [r3, #12]
	(*mobj).curr_time = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
	(*mobj).elapsed_time = 0;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
	(*mobj).display_info_msg=display_event_handler;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <pro_timer_init+0x34>)
 8000eb4:	611a      	str	r2, [r3, #16]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	08000655 	.word	0x08000655

08000ec8 <pro_timer_state_machine>:
void pro_timer_state_machine(protimer_t *mobj, pro_timer_general_event_t *e) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	switch (mobj->active_state) {
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7b1b      	ldrb	r3, [r3, #12]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d825      	bhi.n	8000f26 <pro_timer_state_machine+0x5e>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <pro_timer_state_machine+0x18>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000ef5 	.word	0x08000ef5
 8000ee4:	08000eff 	.word	0x08000eff
 8000ee8:	08000f09 	.word	0x08000f09
 8000eec:	08000f13 	.word	0x08000f13
 8000ef0:	08000f1d 	.word	0x08000f1d
	case IDLE: {
		protimer_state_handler_idle(mobj, e);
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fd36 	bl	8000968 <protimer_state_handler_idle>
		break;
 8000efc:	e014      	b.n	8000f28 <pro_timer_state_machine+0x60>

	}
	case TIME_SET: {
		protimer_state_handler_timeset(mobj, e);
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fdaf 	bl	8000a64 <protimer_state_handler_timeset>
		break;
 8000f06:	e00f      	b.n	8000f28 <pro_timer_state_machine+0x60>
	}
	case COUNTDOWN: {
		protimer_state_handler_countdown(mobj, e);
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fe20 	bl	8000b50 <protimer_state_handler_countdown>
		break;
 8000f10:	e00a      	b.n	8000f28 <pro_timer_state_machine+0x60>
	}
	case PAUSE: {
		protimer_state_handler_pause(mobj, e);
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fea3 	bl	8000c60 <protimer_state_handler_pause>
		break;
 8000f1a:	e005      	b.n	8000f28 <pro_timer_state_machine+0x60>
	}
	case STAT: {
		protimer_state_handler_stat(mobj, e);
 8000f1c:	6839      	ldr	r1, [r7, #0]
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff0a 	bl	8000d38 <protimer_state_handler_stat>
		break;
 8000f24:	e000      	b.n	8000f28 <pro_timer_state_machine+0x60>
	}
	default:
		break;
 8000f26:	bf00      	nop

	}
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f023 030f 	bic.w	r3, r3, #15
 8000f40:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	f043 030c 	orr.w	r3, r3, #12
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	f043 030c 	orr.w	r3, r3, #12
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2304      	movs	r3, #4
 8000f7a:	214e      	movs	r1, #78	; 0x4e
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <lcd_send_cmd+0x5c>)
 8000f7e:	f001 f925 	bl	80021cc <HAL_I2C_Master_Transmit>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000b0 	.word	0x200000b0

08000f90 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f023 030f 	bic.w	r3, r3, #15
 8000fa0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f043 030d 	orr.w	r3, r3, #13
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f043 0309 	orr.w	r3, r3, #9
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	f043 030d 	orr.w	r3, r3, #13
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	f043 0309 	orr.w	r3, r3, #9
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fd0:	f107 0208 	add.w	r2, r7, #8
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2304      	movs	r3, #4
 8000fda:	214e      	movs	r1, #78	; 0x4e
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <lcd_send_data+0x5c>)
 8000fde:	f001 f8f5 	bl	80021cc <HAL_I2C_Master_Transmit>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000b0 	.word	0x200000b0

08000ff0 <lcd_clear>:

void lcd_clear (void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000ff6:	2080      	movs	r0, #128	; 0x80
 8000ff8:	f7ff ff9a 	bl	8000f30 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	e005      	b.n	800100e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001002:	2020      	movs	r0, #32
 8001004:	f7ff ffc4 	bl	8000f90 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b45      	cmp	r3, #69	; 0x45
 8001012:	ddf6      	ble.n	8001002 <lcd_clear+0x12>
	}
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
    switch (row)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <lcd_put_cur+0x18>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d005      	beq.n	8001040 <lcd_put_cur+0x22>
 8001034:	e009      	b.n	800104a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	603b      	str	r3, [r7, #0]
            break;
 800103e:	e004      	b.n	800104a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001046:	603b      	str	r3, [r7, #0]
            break;
 8001048:	bf00      	nop
    }

    lcd_send_cmd (col);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff6e 	bl	8000f30 <lcd_send_cmd>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <lcd_send_string>:
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

void lcd_send_string (char *str)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001064:	e006      	b.n	8001074 <lcd_send_string+0x18>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff8e 	bl	8000f90 <lcd_send_data>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f4      	bne.n	8001066 <lcd_send_string+0xa>
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
	btn_event_handler(GPIO_Pin, btn_evt);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x20>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe7c 	bl	8000d98 <btn_event_handler>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000108 	.word	0x20000108

080010ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010b0:	f000 fb66 	bl	8001780 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010b4:	f000 f84e 	bl	8001154 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010b8:	f000 f938 	bl	800132c <MX_GPIO_Init>
	MX_I2C1_Init();
 80010bc:	f000 f8b4 	bl	8001228 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80010c0:	f000 f8e0 	bl	8001284 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80010c4:	f000 f908 	bl	80012d8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	pro_timer_init(timerobj);
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <main+0x98>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fedf 	bl	8000e90 <pro_timer_init>
	copy_button_evt_to_general_evt(btn_evt, timtick_evt);
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <main+0x9c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1d      	ldr	r2, [pc, #116]	; (800114c <main+0xa0>)
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fc25 	bl	800092c <copy_button_evt_to_general_evt>
	copy_tick_info_to_general_struct(thick_evt, timtick_evt);
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <main+0xa4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <main+0xa0>)
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fc2a 	bl	8000946 <copy_tick_info_to_general_struct>

		/* USER CODE BEGIN 3 */
		/*if (btn_evt->is_button_pressed) {
			copy_button_evt_to_general_evt(btn_evt, timtick_evt);
		}*/
		if (!(isevent_thick(thick_evt))) {
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <main+0xa4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa64 	bl	80005c4 <isevent_thick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f083 0301 	eor.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <main+0x66>
			thick_evt->is_time_idle = true;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <main+0xa4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2201      	movs	r2, #1
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	e003      	b.n	800111a <main+0x6e>
		} else
			thick_evt->is_time_idle = false;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <main+0xa4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
		copy_tick_info_to_general_struct(thick_evt, timtick_evt);
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <main+0xa4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <main+0xa0>)
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fc0e 	bl	8000946 <copy_tick_info_to_general_struct>
		pro_timer_state_machine(timerobj, timtick_evt);
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <main+0x98>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a07      	ldr	r2, [pc, #28]	; (800114c <main+0xa0>)
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fec7 	bl	8000ec8 <pro_timer_state_machine>
		btn_evt->is_button_pressed = 0;
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <main+0x9c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	705a      	strb	r2, [r3, #1]
		if (!(isevent_thick(thick_evt))) {
 8001142:	e7d6      	b.n	80010f2 <main+0x46>
 8001144:	20000104 	.word	0x20000104
 8001148:	20000108 	.word	0x20000108
 800114c:	200000ac 	.word	0x200000ac
 8001150:	20000150 	.word	0x20000150

08001154 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	; 0x50
 8001158:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	2230      	movs	r2, #48	; 0x30
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 ff40 	bl	8003fe8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <SystemClock_Config+0xcc>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <SystemClock_Config+0xcc>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <SystemClock_Config+0xcc>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <SystemClock_Config+0xd0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a21      	ldr	r2, [pc, #132]	; (8001224 <SystemClock_Config+0xd0>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <SystemClock_Config+0xd0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b0:	2301      	movs	r3, #1
 80011b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 148;
 80011c8:	2394      	movs	r3, #148	; 0x94
 80011ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 faff 	bl	80027dc <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x94>
		Error_Handler();
 80011e4:	f000 f904 	bl	80013f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011e8:	230f      	movs	r3, #15
 80011ea:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2104      	movs	r1, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fd60 	bl	8002ccc <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xc2>
		Error_Handler();
 8001212:	f000 f8ed 	bl	80013f0 <Error_Handler>
	}
}
 8001216:	bf00      	nop
 8001218:	3750      	adds	r7, #80	; 0x50
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000

08001228 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x50>)
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <MX_I2C1_Init+0x54>)
 8001230:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x50>)
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_I2C1_Init+0x58>)
 8001236:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_I2C1_Init+0x50>)
 8001246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_I2C1_Init+0x50>)
 8001266:	f000 fe6d 	bl	8001f44 <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001270:	f000 f8be 	bl	80013f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200000b0 	.word	0x200000b0
 800127c:	40005400 	.word	0x40005400
 8001280:	000186a0 	.word	0x000186a0

08001284 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_USART1_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012bc:	f001 ff02 	bl	80030c4 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80012c6:	f000 f893 	bl	80013f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000010c 	.word	0x2000010c
 80012d4:	40011000 	.word	0x40011000

080012d8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_USART2_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 8001310:	f001 fed8 	bl	80030c4 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800131a:	f000 f869 	bl	80013f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000154 	.word	0x20000154
 8001328:	40004400 	.word	0x40004400

0800132c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <MX_GPIO_Init+0xbc>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <MX_GPIO_Init+0xbc>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_GPIO_Init+0xbc>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8001396:	2313      	movs	r3, #19
 8001398:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800139a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800139e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a0:	2302      	movs	r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	4810      	ldr	r0, [pc, #64]	; (80013ec <MX_GPIO_Init+0xc0>)
 80013ac:	f000 fbfe 	bl	8001bac <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2006      	movs	r0, #6
 80013b6:	f000 fb30 	bl	8001a1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ba:	2006      	movs	r0, #6
 80013bc:	f000 fb49 	bl	8001a52 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2007      	movs	r0, #7
 80013c6:	f000 fb28 	bl	8001a1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013ca:	2007      	movs	r0, #7
 80013cc:	f000 fb41 	bl	8001a52 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	200a      	movs	r0, #10
 80013d6:	f000 fb20 	bl	8001a1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013da:	200a      	movs	r0, #10
 80013dc:	f000 fb39 	bl	8001a52 <HAL_NVIC_EnableIRQ>

}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_MspInit+0x4c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_MspInit+0x4c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_I2C_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148e:	2312      	movs	r3, #18
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149a:	2304      	movs	r3, #4
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <HAL_I2C_MspInit+0x8c>)
 80014a6:	f000 fb81 	bl	8001bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a3a      	ldr	r2, [pc, #232]	; (80015e4 <HAL_UART_MspInit+0x108>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d135      	bne.n	800156a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a38      	ldr	r2, [pc, #224]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a31      	ldr	r2, [pc, #196]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001536:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001548:	2307      	movs	r3, #7
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4826      	ldr	r0, [pc, #152]	; (80015ec <HAL_UART_MspInit+0x110>)
 8001554:	f000 fb2a 	bl	8001bac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2025      	movs	r0, #37	; 0x25
 800155e:	f000 fa5c 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001562:	2025      	movs	r0, #37	; 0x25
 8001564:	f000 fa75 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001568:	e038      	b.n	80015dc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <HAL_UART_MspInit+0x114>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d133      	bne.n	80015dc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a1a      	ldr	r2, [pc, #104]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 800157e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_UART_MspInit+0x10c>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ac:	230c      	movs	r3, #12
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015bc:	2307      	movs	r3, #7
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <HAL_UART_MspInit+0x110>)
 80015c8:	f000 faf0 	bl	8001bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	2026      	movs	r0, #38	; 0x26
 80015d2:	f000 fa22 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d6:	2026      	movs	r0, #38	; 0x26
 80015d8:	f000 fa3b 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 80015dc:	bf00      	nop
 80015de:	3730      	adds	r7, #48	; 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40011000 	.word	0x40011000
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40004400 	.word	0x40004400

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 f8f0 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800164c:	2001      	movs	r0, #1
 800164e:	f000 fc61 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}

08001656 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800165a:	2002      	movs	r0, #2
 800165c:	f000 fc5a 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001668:	2010      	movs	r0, #16
 800166a:	f000 fc53 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <USART1_IRQHandler+0x10>)
 800167a:	f001 fe03 	bl	8003284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */


  /* USER CODE END USART1_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000010c 	.word	0x2000010c

08001688 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <USART2_IRQHandler+0x10>)
 800168e:	f001 fdf9 	bl	8003284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000154 	.word	0x20000154

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f002 fc62 	bl	8003f94 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000098 	.word	0x20000098
 8001704:	200001b0 	.word	0x200001b0

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001732:	490e      	ldr	r1, [pc, #56]	; (800176c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001748:	4c0b      	ldr	r4, [pc, #44]	; (8001778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001756:	f7ff ffd7 	bl	8001708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f002 fc21 	bl	8003fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff fca5 	bl	80010ac <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001770:	08004954 	.word	0x08004954
  ldr r2, =_sbss
 8001774:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001778:	200001ac 	.word	0x200001ac

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f92b 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fe22 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f943 	bl	8001a6e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f90b 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000000 	.word	0x20000000
 800181c:	20000008 	.word	0x20000008
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	20000198 	.word	0x20000198

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000198 	.word	0x20000198

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff29 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff3e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff31 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff feda 	bl	800184c <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d008      	beq.n	8001ab8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e052      	b.n	8001b5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0216 	bic.w	r2, r2, #22
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d103      	bne.n	8001ae8 <HAL_DMA_Abort+0x62>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0208 	bic.w	r2, r2, #8
 8001af6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b08:	e013      	b.n	8001b32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0a:	f7ff fe9f 	bl	800184c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d90c      	bls.n	8001b32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e015      	b.n	8001b5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e4      	bne.n	8001b0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	223f      	movs	r2, #63	; 0x3f
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d004      	beq.n	8001b84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e00c      	b.n	8001b9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2205      	movs	r2, #5
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e16b      	b.n	8001ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	f040 815a 	bne.w	8001e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d005      	beq.n	8001bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d130      	bne.n	8001c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 0201 	and.w	r2, r3, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d017      	beq.n	8001c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d123      	bne.n	8001cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	69b9      	ldr	r1, [r7, #24]
 8001cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80b4 	beq.w	8001e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_GPIO_Init+0x30c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a5f      	ldr	r2, [pc, #380]	; (8001eb8 <HAL_GPIO_Init+0x30c>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <HAL_GPIO_Init+0x30c>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4e:	4a5b      	ldr	r2, [pc, #364]	; (8001ebc <HAL_GPIO_Init+0x310>)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_GPIO_Init+0x314>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02b      	beq.n	8001dd2 <HAL_GPIO_Init+0x226>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_GPIO_Init+0x318>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d025      	beq.n	8001dce <HAL_GPIO_Init+0x222>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a50      	ldr	r2, [pc, #320]	; (8001ec8 <HAL_GPIO_Init+0x31c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <HAL_GPIO_Init+0x21e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_GPIO_Init+0x21a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4e      	ldr	r2, [pc, #312]	; (8001ed0 <HAL_GPIO_Init+0x324>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x216>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4d      	ldr	r2, [pc, #308]	; (8001ed4 <HAL_GPIO_Init+0x328>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x212>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4c      	ldr	r2, [pc, #304]	; (8001ed8 <HAL_GPIO_Init+0x32c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x20e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	; (8001edc <HAL_GPIO_Init+0x330>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x20a>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e00e      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001db6:	2308      	movs	r3, #8
 8001db8:	e00c      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dba:	2306      	movs	r3, #6
 8001dbc:	e00a      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x228>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de4:	4935      	ldr	r1, [pc, #212]	; (8001ebc <HAL_GPIO_Init+0x310>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e16:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e40:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	f67f ae90 	bls.w	8001bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40021c00 	.word	0x40021c00
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e001      	b.n	8001f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f8a8 	bl	8001088 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e12b      	b.n	80021ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fa6e 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	; 0x24
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fa8:	f001 f864 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8001fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a81      	ldr	r2, [pc, #516]	; (80021b8 <HAL_I2C_Init+0x274>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d807      	bhi.n	8001fc8 <HAL_I2C_Init+0x84>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a80      	ldr	r2, [pc, #512]	; (80021bc <HAL_I2C_Init+0x278>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e006      	b.n	8001fd6 <HAL_I2C_Init+0x92>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a7d      	ldr	r2, [pc, #500]	; (80021c0 <HAL_I2C_Init+0x27c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	bf94      	ite	ls
 8001fd0:	2301      	movls	r3, #1
 8001fd2:	2300      	movhi	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0e7      	b.n	80021ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4a78      	ldr	r2, [pc, #480]	; (80021c4 <HAL_I2C_Init+0x280>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a6a      	ldr	r2, [pc, #424]	; (80021b8 <HAL_I2C_Init+0x274>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d802      	bhi.n	8002018 <HAL_I2C_Init+0xd4>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3301      	adds	r3, #1
 8002016:	e009      	b.n	800202c <HAL_I2C_Init+0xe8>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	4a69      	ldr	r2, [pc, #420]	; (80021c8 <HAL_I2C_Init+0x284>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	3301      	adds	r3, #1
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	430b      	orrs	r3, r1
 8002032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800203e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	495c      	ldr	r1, [pc, #368]	; (80021b8 <HAL_I2C_Init+0x274>)
 8002048:	428b      	cmp	r3, r1
 800204a:	d819      	bhi.n	8002080 <HAL_I2C_Init+0x13c>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e59      	subs	r1, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fbb1 f3f3 	udiv	r3, r1, r3
 800205a:	1c59      	adds	r1, r3, #1
 800205c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002060:	400b      	ands	r3, r1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_I2C_Init+0x138>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e59      	subs	r1, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fbb1 f3f3 	udiv	r3, r1, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207a:	e051      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 800207c:	2304      	movs	r3, #4
 800207e:	e04f      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d111      	bne.n	80020ac <HAL_I2C_Init+0x168>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1e58      	subs	r0, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e012      	b.n	80020d2 <HAL_I2C_Init+0x18e>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	0099      	lsls	r1, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Init+0x196>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e022      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <HAL_I2C_Init+0x1bc>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1e58      	subs	r0, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6859      	ldr	r1, [r3, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	440b      	add	r3, r1
 80020f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fe:	e00f      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e58      	subs	r0, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	0099      	lsls	r1, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	6809      	ldr	r1, [r1, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800214e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6911      	ldr	r1, [r2, #16]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68d2      	ldr	r2, [r2, #12]
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	430b      	orrs	r3, r1
 8002162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	000186a0 	.word	0x000186a0
 80021bc:	001e847f 	.word	0x001e847f
 80021c0:	003d08ff 	.word	0x003d08ff
 80021c4:	431bde83 	.word	0x431bde83
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	460b      	mov	r3, r1
 80021da:	817b      	strh	r3, [r7, #10]
 80021dc:	4613      	mov	r3, r2
 80021de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff fb34 	bl	800184c <HAL_GetTick>
 80021e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	f040 80e0 	bne.w	80023b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2319      	movs	r3, #25
 80021fa:	2201      	movs	r2, #1
 80021fc:	4970      	ldr	r1, [pc, #448]	; (80023c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f964 	bl	80024cc <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	e0d3      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_I2C_Master_Transmit+0x50>
 8002218:	2302      	movs	r3, #2
 800221a:	e0cc      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d007      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2221      	movs	r2, #33	; 0x21
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2210      	movs	r2, #16
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	893a      	ldrh	r2, [r7, #8]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002284:	8979      	ldrh	r1, [r7, #10]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f89c 	bl	80023c8 <I2C_MasterRequestWrite>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e08d      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022b0:	e066      	b.n	8002380 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	6a39      	ldr	r1, [r7, #32]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f9de 	bl	8002678 <I2C_WaitOnTXEFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d107      	bne.n	80022da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06b      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d11b      	bne.n	8002354 <HAL_I2C_Master_Transmit+0x188>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	6a39      	ldr	r1, [r7, #32]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f9ce 	bl	80026fa <I2C_WaitOnBTFFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00d      	beq.n	8002380 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	2b04      	cmp	r3, #4
 800236a:	d107      	bne.n	800237c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e01a      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	d194      	bne.n	80022b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	00100002 	.word	0x00100002
 80023c4:	ffff0000 	.word	0xffff0000

080023c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	460b      	mov	r3, r1
 80023d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d006      	beq.n	80023f2 <I2C_MasterRequestWrite+0x2a>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d003      	beq.n	80023f2 <I2C_MasterRequestWrite+0x2a>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f0:	d108      	bne.n	8002404 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e00b      	b.n	800241c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	2b12      	cmp	r3, #18
 800240a:	d107      	bne.n	800241c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f84f 	bl	80024cc <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002442:	d103      	bne.n	800244c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e035      	b.n	80024bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002458:	d108      	bne.n	800246c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002468:	611a      	str	r2, [r3, #16]
 800246a:	e01b      	b.n	80024a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	11db      	asrs	r3, r3, #7
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f003 0306 	and.w	r3, r3, #6
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f063 030f 	orn	r3, r3, #15
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <I2C_MasterRequestWrite+0xfc>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f875 	bl	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e010      	b.n	80024bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800249a:	897b      	ldrh	r3, [r7, #10]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <I2C_MasterRequestWrite+0x100>)
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f865 	bl	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	00010008 	.word	0x00010008
 80024c8:	00010002 	.word	0x00010002

080024cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024dc:	e025      	b.n	800252a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d021      	beq.n	800252a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7ff f9b1 	bl	800184c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d116      	bne.n	800252a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e023      	b.n	8002572 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10d      	bne.n	8002550 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4013      	ands	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf0c      	ite	eq
 8002546:	2301      	moveq	r3, #1
 8002548:	2300      	movne	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	e00c      	b.n	800256a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	43da      	mvns	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4013      	ands	r3, r2
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	429a      	cmp	r2, r3
 800256e:	d0b6      	beq.n	80024de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002588:	e051      	b.n	800262e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002598:	d123      	bne.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f043 0204 	orr.w	r2, r3, #4
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e046      	b.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d021      	beq.n	800262e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7ff f92f 	bl	800184c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e020      	b.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10c      	bne.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4013      	ands	r3, r2
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	e00b      	b.n	800266a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	43da      	mvns	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4013      	ands	r3, r2
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d18d      	bne.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002684:	e02d      	b.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f878 	bl	800277c <I2C_IsAcknowledgeFailed>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e02d      	b.n	80026f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d021      	beq.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7ff f8d5 	bl	800184c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d116      	bne.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e007      	b.n	80026f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d1ca      	bne.n	8002686 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002706:	e02d      	b.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f837 	bl	800277c <I2C_IsAcknowledgeFailed>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e02d      	b.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d021      	beq.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002720:	f7ff f894 	bl	800184c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	429a      	cmp	r2, r3
 800272e:	d302      	bcc.n	8002736 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d116      	bne.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e007      	b.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d1ca      	bne.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002792:	d11b      	bne.n	80027cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800279c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f043 0204 	orr.w	r2, r3, #4
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e264      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d075      	beq.n	80028e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fa:	4ba3      	ldr	r3, [pc, #652]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b04      	cmp	r3, #4
 8002804:	d00c      	beq.n	8002820 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002806:	4ba0      	ldr	r3, [pc, #640]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280e:	2b08      	cmp	r3, #8
 8002810:	d112      	bne.n	8002838 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002812:	4b9d      	ldr	r3, [pc, #628]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281e:	d10b      	bne.n	8002838 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	4b99      	ldr	r3, [pc, #612]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d05b      	beq.n	80028e4 <HAL_RCC_OscConfig+0x108>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d157      	bne.n	80028e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e23f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x74>
 8002842:	4b91      	ldr	r3, [pc, #580]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a90      	ldr	r2, [pc, #576]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e01d      	b.n	800288c <HAL_RCC_OscConfig+0xb0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x98>
 800285a:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a8a      	ldr	r2, [pc, #552]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a87      	ldr	r2, [pc, #540]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0xb0>
 8002874:	4b84      	ldr	r3, [pc, #528]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a83      	ldr	r2, [pc, #524]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b81      	ldr	r3, [pc, #516]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a80      	ldr	r2, [pc, #512]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe ffda 	bl	800184c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe ffd6 	bl	800184c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e204      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0xc0>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe ffc6 	bl	800184c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe ffc2 	bl	800184c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1f0      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	4b6c      	ldr	r3, [pc, #432]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0xe8>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d063      	beq.n	80029ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	2b08      	cmp	r3, #8
 8002908:	d11c      	bne.n	8002944 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b5f      	ldr	r3, [pc, #380]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	4b5c      	ldr	r3, [pc, #368]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x152>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e1c4      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b56      	ldr	r3, [pc, #344]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4952      	ldr	r1, [pc, #328]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	e03a      	b.n	80029ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294c:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <HAL_RCC_OscConfig+0x2b0>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe ff7b 	bl	800184c <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295a:	f7fe ff77 	bl	800184c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1a5      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4940      	ldr	r1, [pc, #256]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
 800298c:	e015      	b.n	80029ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_OscConfig+0x2b0>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe ff5a 	bl	800184c <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299c:	f7fe ff56 	bl	800184c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e184      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d030      	beq.n	8002a28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_RCC_OscConfig+0x2b4>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe ff3a 	bl	800184c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe ff36 	bl	800184c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e164      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x200>
 80029fa:	e015      	b.n	8002a28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fc:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_RCC_OscConfig+0x2b4>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe ff23 	bl	800184c <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7fe ff1f 	bl	800184c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e14d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80a0 	beq.w	8002b76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_OscConfig+0x2b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d121      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_RCC_OscConfig+0x2b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <HAL_RCC_OscConfig+0x2b8>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fee5 	bl	800184c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	e011      	b.n	8002aaa <HAL_RCC_OscConfig+0x2ce>
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470000 	.word	0x42470000
 8002a90:	42470e80 	.word	0x42470e80
 8002a94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a98:	f7fe fed8 	bl	800184c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e106      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b85      	ldr	r3, [pc, #532]	; (8002cc0 <HAL_RCC_OscConfig+0x4e4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_OscConfig+0x2f0>
 8002abe:	4b81      	ldr	r3, [pc, #516]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a80      	ldr	r2, [pc, #512]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e01c      	b.n	8002b06 <HAL_RCC_OscConfig+0x32a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x312>
 8002ad4:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a7a      	ldr	r2, [pc, #488]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	4b78      	ldr	r3, [pc, #480]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a77      	ldr	r2, [pc, #476]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x32a>
 8002aee:	4b75      	ldr	r3, [pc, #468]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a74      	ldr	r2, [pc, #464]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a71      	ldr	r2, [pc, #452]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fe9d 	bl	800184c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fe99 	bl	800184c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0c5      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ee      	beq.n	8002b16 <HAL_RCC_OscConfig+0x33a>
 8002b38:	e014      	b.n	8002b64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fe87 	bl	800184c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fe83 	bl	800184c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0af      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	4b5a      	ldr	r3, [pc, #360]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b56      	ldr	r3, [pc, #344]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a55      	ldr	r2, [pc, #340]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 809b 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d05c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d141      	bne.n	8002c18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x4ec>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fe57 	bl	800184c <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fe53 	bl	800184c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e081      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb4:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	019b      	lsls	r3, r3, #6
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	041b      	lsls	r3, r3, #16
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	061b      	lsls	r3, r3, #24
 8002be4:	4937      	ldr	r1, [pc, #220]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_OscConfig+0x4ec>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fe2c 	bl	800184c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe fe28 	bl	800184c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e056      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x41c>
 8002c16:	e04e      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c18:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCC_OscConfig+0x4ec>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fe15 	bl	800184c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c26:	f7fe fe11 	bl	800184c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e03f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x44a>
 8002c44:	e037      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e032      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d028      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d121      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d11a      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c82:	4013      	ands	r3, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d111      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	42470060 	.word	0x42470060

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cc      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d90c      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d044      	beq.n	8002dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d119      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e067      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4934      	ldr	r1, [pc, #208]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dbc:	f7fe fd46 	bl	800184c <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fe fd42 	bl	800184c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e04f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d20c      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490a      	ldr	r1, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fca6 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	080048f8 	.word	0x080048f8
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb0:	4b67      	ldr	r3, [pc, #412]	; (8003050 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d00d      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	f200 80bd 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x34>
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eca:	e0b7      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4b61      	ldr	r3, [pc, #388]	; (8003054 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ece:	60bb      	str	r3, [r7, #8]
       break;
 8002ed0:	e0b7      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed2:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ed4:	60bb      	str	r3, [r7, #8]
      break;
 8002ed6:	e0b4      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed8:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee2:	4b5b      	ldr	r3, [pc, #364]	; (8003050 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04d      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b58      	ldr	r3, [pc, #352]	; (8003050 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	ea02 0800 	and.w	r8, r2, r0
 8002f06:	ea03 0901 	and.w	r9, r3, r1
 8002f0a:	4640      	mov	r0, r8
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	014b      	lsls	r3, r1, #5
 8002f18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f1c:	0142      	lsls	r2, r0, #5
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	ebb0 0008 	subs.w	r0, r0, r8
 8002f26:	eb61 0109 	sbc.w	r1, r1, r9
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	018b      	lsls	r3, r1, #6
 8002f34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f38:	0182      	lsls	r2, r0, #6
 8002f3a:	1a12      	subs	r2, r2, r0
 8002f3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f40:	f04f 0000 	mov.w	r0, #0
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	00d9      	lsls	r1, r3, #3
 8002f4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f4e:	00d0      	lsls	r0, r2, #3
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	eb12 0208 	adds.w	r2, r2, r8
 8002f58:	eb43 0309 	adc.w	r3, r3, r9
 8002f5c:	f04f 0000 	mov.w	r0, #0
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	0259      	lsls	r1, r3, #9
 8002f66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f6a:	0250      	lsls	r0, r2, #9
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	f7fd f980 	bl	8000280 <__aeabi_uldivmod>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4613      	mov	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	e04a      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	461a      	mov	r2, r3
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	ea02 0400 	and.w	r4, r2, r0
 8002fa2:	ea03 0501 	and.w	r5, r3, r1
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	4629      	mov	r1, r5
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	014b      	lsls	r3, r1, #5
 8002fb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fb8:	0142      	lsls	r2, r0, #5
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	1b00      	subs	r0, r0, r4
 8002fc0:	eb61 0105 	sbc.w	r1, r1, r5
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	018b      	lsls	r3, r1, #6
 8002fce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fd2:	0182      	lsls	r2, r0, #6
 8002fd4:	1a12      	subs	r2, r2, r0
 8002fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	00d9      	lsls	r1, r3, #3
 8002fe4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe8:	00d0      	lsls	r0, r2, #3
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	1912      	adds	r2, r2, r4
 8002ff0:	eb45 0303 	adc.w	r3, r5, r3
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	0299      	lsls	r1, r3, #10
 8002ffe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003002:	0290      	lsls	r0, r2, #10
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	461a      	mov	r2, r3
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	f7fd f934 	bl	8000280 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	60bb      	str	r3, [r7, #8]
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800303e:	60bb      	str	r3, [r7, #8]
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	68bb      	ldr	r3, [r7, #8]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000000 	.word	0x20000000

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003078:	f7ff fff0 	bl	800305c <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	08004908 	.word	0x08004908

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a0:	f7ff ffdc 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0b5b      	lsrs	r3, r3, #13
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08004908 	.word	0x08004908

080030c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e03f      	b.n	8003156 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe f9f6 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fd7b 	bl	8003c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800313c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b08a      	sub	sp, #40	; 0x28
 8003162:	af02      	add	r7, sp, #8
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d17c      	bne.n	8003278 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_UART_Transmit+0x2c>
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e075      	b.n	800327a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_UART_Transmit+0x3e>
 8003198:	2302      	movs	r3, #2
 800319a:	e06e      	b.n	800327a <HAL_UART_Transmit+0x11c>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2221      	movs	r2, #33	; 0x21
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031b2:	f7fe fb4b 	bl	800184c <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031cc:	d108      	bne.n	80031e0 <HAL_UART_Transmit+0x82>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e003      	b.n	80031e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031f0:	e02a      	b.n	8003248 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 faf9 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e036      	b.n	800327a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003220:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	3302      	adds	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	e007      	b.n	800323a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	3301      	adds	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1cf      	bne.n	80031f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fac9 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e006      	b.n	800327a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b0ba      	sub	sp, #232	; 0xe8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_UART_IRQHandler+0x66>
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fbd3 	bl	8003a8e <UART_Receive_IT>
      return;
 80032e8:	e256      	b.n	8003798 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80de 	beq.w	80034b0 <HAL_UART_IRQHandler+0x22c>
 80032f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003304:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80d1 	beq.w	80034b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00b      	beq.n	8003332 <HAL_UART_IRQHandler+0xae>
 800331a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f043 0201 	orr.w	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_UART_IRQHandler+0xd2>
 800333e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_UART_IRQHandler+0xf6>
 8003362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0204 	orr.w	r2, r3, #4
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d011      	beq.n	80033aa <HAL_UART_IRQHandler+0x126>
 8003386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f043 0208 	orr.w	r2, r3, #8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 81ed 	beq.w	800378e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_UART_IRQHandler+0x14e>
 80033c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fb5e 	bl	8003a8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_UART_IRQHandler+0x17a>
 80033f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d04f      	beq.n	800349e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa66 	bl	80038d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d141      	bne.n	8003496 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3314      	adds	r3, #20
 8003418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800342c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3314      	adds	r3, #20
 800343a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800343e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800344a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1d9      	bne.n	8003412 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	2b00      	cmp	r3, #0
 8003464:	d013      	beq.n	800348e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	4a7d      	ldr	r2, [pc, #500]	; (8003660 <HAL_UART_IRQHandler+0x3dc>)
 800346c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fb77 	bl	8001b66 <HAL_DMA_Abort_IT>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003488:	4610      	mov	r0, r2
 800348a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	e00e      	b.n	80034ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f99a 	bl	80037c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003494:	e00a      	b.n	80034ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f996 	bl	80037c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349c:	e006      	b.n	80034ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f992 	bl	80037c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034aa:	e170      	b.n	800378e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	bf00      	nop
    return;
 80034ae:	e16e      	b.n	800378e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	f040 814a 	bne.w	800374e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8143 	beq.w	800374e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 813c 	beq.w	800374e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	f040 80b4 	bne.w	8003664 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003508:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8140 	beq.w	8003792 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800351a:	429a      	cmp	r2, r3
 800351c:	f080 8139 	bcs.w	8003792 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003526:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003532:	f000 8088 	beq.w	8003646 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800354c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800356e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800357a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1d9      	bne.n	8003536 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e1      	bne.n	8003582 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3314      	adds	r3, #20
 80035c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3314      	adds	r3, #20
 80035de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e3      	bne.n	80035be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003616:	f023 0310 	bic.w	r3, r3, #16
 800361a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003628:	65ba      	str	r2, [r7, #88]	; 0x58
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800362e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003630:	e841 2300 	strex	r3, r2, [r1]
 8003634:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e3      	bne.n	8003604 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe fa20 	bl	8001a86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364e:	b29b      	uxth	r3, r3
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	b29b      	uxth	r3, r3
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8c0 	bl	80037dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800365c:	e099      	b.n	8003792 <HAL_UART_IRQHandler+0x50e>
 800365e:	bf00      	nop
 8003660:	08003997 	.word	0x08003997
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800366c:	b29b      	uxth	r3, r3
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 808b 	beq.w	8003796 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8086 	beq.w	8003796 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800369a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036ae:	647a      	str	r2, [r7, #68]	; 0x44
 80036b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e3      	bne.n	800368a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	623b      	str	r3, [r7, #32]
   return(result);
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3314      	adds	r3, #20
 80036e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036e6:	633a      	str	r2, [r7, #48]	; 0x30
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e3      	bne.n	80036c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	60fb      	str	r3, [r7, #12]
   return(result);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0310 	bic.w	r3, r3, #16
 800371e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800372c:	61fa      	str	r2, [r7, #28]
 800372e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	69b9      	ldr	r1, [r7, #24]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	617b      	str	r3, [r7, #20]
   return(result);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e3      	bne.n	8003708 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f848 	bl	80037dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800374c:	e023      	b.n	8003796 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800374e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_UART_IRQHandler+0x4ea>
 800375a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f929 	bl	80039be <UART_Transmit_IT>
    return;
 800376c:	e014      	b.n	8003798 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00e      	beq.n	8003798 <HAL_UART_IRQHandler+0x514>
 800377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f969 	bl	8003a5e <UART_EndTransmit_IT>
    return;
 800378c:	e004      	b.n	8003798 <HAL_UART_IRQHandler+0x514>
    return;
 800378e:	bf00      	nop
 8003790:	e002      	b.n	8003798 <HAL_UART_IRQHandler+0x514>
      return;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <HAL_UART_IRQHandler+0x514>
      return;
 8003796:	bf00      	nop
  }
}
 8003798:	37e8      	adds	r7, #232	; 0xe8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop

080037a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b090      	sub	sp, #64	; 0x40
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003804:	e050      	b.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d04c      	beq.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800380e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x30>
 8003814:	f7fe f81a 	bl	800184c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003820:	429a      	cmp	r2, r3
 8003822:	d241      	bcs.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003844:	637a      	str	r2, [r7, #52]	; 0x34
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800384a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	613b      	str	r3, [r7, #16]
   return(result);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003878:	623a      	str	r2, [r7, #32]
 800387a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	69f9      	ldr	r1, [r7, #28]
 800387e:	6a3a      	ldr	r2, [r7, #32]
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	61bb      	str	r3, [r7, #24]
   return(result);
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e00f      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d09f      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3740      	adds	r7, #64	; 0x40
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b095      	sub	sp, #84	; 0x54
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038f8:	643a      	str	r2, [r7, #64]	; 0x40
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3314      	adds	r3, #20
 8003912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	61fb      	str	r3, [r7, #28]
   return(result);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800392c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	2b01      	cmp	r3, #1
 8003946:	d119      	bne.n	800397c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	60bb      	str	r3, [r7, #8]
   return(result);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f023 0310 	bic.w	r3, r3, #16
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003968:	61ba      	str	r2, [r7, #24]
 800396a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6979      	ldr	r1, [r7, #20]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	613b      	str	r3, [r7, #16]
   return(result);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e5      	bne.n	8003948 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800398a:	bf00      	nop
 800398c:	3754      	adds	r7, #84	; 0x54
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff ff09 	bl	80037c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b21      	cmp	r3, #33	; 0x21
 80039d0:	d13e      	bne.n	8003a50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	d114      	bne.n	8003a06 <UART_Transmit_IT+0x48>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d110      	bne.n	8003a06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	621a      	str	r2, [r3, #32]
 8003a04:	e008      	b.n	8003a18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6211      	str	r1, [r2, #32]
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4619      	mov	r1, r3
 8003a26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10f      	bne.n	8003a4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fe8e 	bl	80037a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b08c      	sub	sp, #48	; 0x30
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b22      	cmp	r3, #34	; 0x22
 8003aa0:	f040 80ab 	bne.w	8003bfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d117      	bne.n	8003ade <UART_Receive_IT+0x50>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d113      	bne.n	8003ade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	1c9a      	adds	r2, r3, #2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
 8003adc:	e026      	b.n	8003b2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d007      	beq.n	8003b02 <UART_Receive_IT+0x74>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <UART_Receive_IT+0x82>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e008      	b.n	8003b22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d15a      	bne.n	8003bf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0220 	bic.w	r2, r2, #32
 8003b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d135      	bne.n	8003bec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	613b      	str	r3, [r7, #16]
   return(result);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f023 0310 	bic.w	r3, r3, #16
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	623a      	str	r2, [r7, #32]
 8003ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	69f9      	ldr	r1, [r7, #28]
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e5      	bne.n	8003b86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d10a      	bne.n	8003bde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fdf9 	bl	80037dc <HAL_UARTEx_RxEventCallback>
 8003bea:	e002      	b.n	8003bf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fde1 	bl	80037b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e002      	b.n	8003bfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3730      	adds	r7, #48	; 0x30
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c08:	b09f      	sub	sp, #124	; 0x7c
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1a:	68d9      	ldr	r1, [r3, #12]
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	ea40 0301 	orr.w	r3, r0, r1
 8003c24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c48:	f021 010c 	bic.w	r1, r1, #12
 8003c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c52:	430b      	orrs	r3, r1
 8003c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c62:	6999      	ldr	r1, [r3, #24]
 8003c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	ea40 0301 	orr.w	r3, r0, r1
 8003c6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4bc5      	ldr	r3, [pc, #788]	; (8003f88 <UART_SetConfig+0x384>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d004      	beq.n	8003c82 <UART_SetConfig+0x7e>
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4bc3      	ldr	r3, [pc, #780]	; (8003f8c <UART_SetConfig+0x388>)
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d103      	bne.n	8003c8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c82:	f7ff fa0b 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8003c86:	6778      	str	r0, [r7, #116]	; 0x74
 8003c88:	e002      	b.n	8003c90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c8a:	f7ff f9f3 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8003c8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c98:	f040 80b6 	bne.w	8003e08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9e:	461c      	mov	r4, r3
 8003ca0:	f04f 0500 	mov.w	r5, #0
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	6439      	str	r1, [r7, #64]	; 0x40
 8003cac:	415b      	adcs	r3, r3
 8003cae:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cb4:	1912      	adds	r2, r2, r4
 8003cb6:	eb45 0303 	adc.w	r3, r5, r3
 8003cba:	f04f 0000 	mov.w	r0, #0
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	00d9      	lsls	r1, r3, #3
 8003cc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cc8:	00d0      	lsls	r0, r2, #3
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	1911      	adds	r1, r2, r4
 8003cd0:	6639      	str	r1, [r7, #96]	; 0x60
 8003cd2:	416b      	adcs	r3, r5
 8003cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8003cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	1891      	adds	r1, r2, r2
 8003ce2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ce4:	415b      	adcs	r3, r3
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003cf0:	f7fc fac6 	bl	8000280 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4ba5      	ldr	r3, [pc, #660]	; (8003f90 <UART_SetConfig+0x38c>)
 8003cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	011e      	lsls	r6, r3, #4
 8003d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d04:	461c      	mov	r4, r3
 8003d06:	f04f 0500 	mov.w	r5, #0
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	462b      	mov	r3, r5
 8003d0e:	1891      	adds	r1, r2, r2
 8003d10:	6339      	str	r1, [r7, #48]	; 0x30
 8003d12:	415b      	adcs	r3, r3
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
 8003d16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d1a:	1912      	adds	r2, r2, r4
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	f04f 0000 	mov.w	r0, #0
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	00d9      	lsls	r1, r3, #3
 8003d2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d2e:	00d0      	lsls	r0, r2, #3
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	1911      	adds	r1, r2, r4
 8003d36:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d38:	416b      	adcs	r3, r5
 8003d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	461a      	mov	r2, r3
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	1891      	adds	r1, r2, r2
 8003d48:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d4a:	415b      	adcs	r3, r3
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d56:	f7fc fa93 	bl	8000280 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4b8c      	ldr	r3, [pc, #560]	; (8003f90 <UART_SetConfig+0x38c>)
 8003d60:	fba3 1302 	umull	r1, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	2164      	movs	r1, #100	; 0x64
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	3332      	adds	r3, #50	; 0x32
 8003d72:	4a87      	ldr	r2, [pc, #540]	; (8003f90 <UART_SetConfig+0x38c>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d80:	441e      	add	r6, r3
 8003d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d84:	4618      	mov	r0, r3
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	1894      	adds	r4, r2, r2
 8003d90:	623c      	str	r4, [r7, #32]
 8003d92:	415b      	adcs	r3, r3
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d9a:	1812      	adds	r2, r2, r0
 8003d9c:	eb41 0303 	adc.w	r3, r1, r3
 8003da0:	f04f 0400 	mov.w	r4, #0
 8003da4:	f04f 0500 	mov.w	r5, #0
 8003da8:	00dd      	lsls	r5, r3, #3
 8003daa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dae:	00d4      	lsls	r4, r2, #3
 8003db0:	4622      	mov	r2, r4
 8003db2:	462b      	mov	r3, r5
 8003db4:	1814      	adds	r4, r2, r0
 8003db6:	653c      	str	r4, [r7, #80]	; 0x50
 8003db8:	414b      	adcs	r3, r1
 8003dba:	657b      	str	r3, [r7, #84]	; 0x54
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	1891      	adds	r1, r2, r2
 8003dc8:	61b9      	str	r1, [r7, #24]
 8003dca:	415b      	adcs	r3, r3
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dd6:	f7fc fa53 	bl	8000280 <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4b6c      	ldr	r3, [pc, #432]	; (8003f90 <UART_SetConfig+0x38c>)
 8003de0:	fba3 1302 	umull	r1, r3, r3, r2
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	2164      	movs	r1, #100	; 0x64
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	3332      	adds	r3, #50	; 0x32
 8003df2:	4a67      	ldr	r2, [pc, #412]	; (8003f90 <UART_SetConfig+0x38c>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	f003 0207 	and.w	r2, r3, #7
 8003dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4432      	add	r2, r6
 8003e04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e06:	e0b9      	b.n	8003f7c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0a:	461c      	mov	r4, r3
 8003e0c:	f04f 0500 	mov.w	r5, #0
 8003e10:	4622      	mov	r2, r4
 8003e12:	462b      	mov	r3, r5
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	6139      	str	r1, [r7, #16]
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e20:	1912      	adds	r2, r2, r4
 8003e22:	eb45 0303 	adc.w	r3, r5, r3
 8003e26:	f04f 0000 	mov.w	r0, #0
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	00d9      	lsls	r1, r3, #3
 8003e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e34:	00d0      	lsls	r0, r2, #3
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	eb12 0804 	adds.w	r8, r2, r4
 8003e3e:	eb43 0905 	adc.w	r9, r3, r5
 8003e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	008b      	lsls	r3, r1, #2
 8003e56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e5a:	0082      	lsls	r2, r0, #2
 8003e5c:	4640      	mov	r0, r8
 8003e5e:	4649      	mov	r1, r9
 8003e60:	f7fc fa0e 	bl	8000280 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <UART_SetConfig+0x38c>)
 8003e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	011e      	lsls	r6, r3, #4
 8003e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e74:	4618      	mov	r0, r3
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	1894      	adds	r4, r2, r2
 8003e80:	60bc      	str	r4, [r7, #8]
 8003e82:	415b      	adcs	r3, r3
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e8a:	1812      	adds	r2, r2, r0
 8003e8c:	eb41 0303 	adc.w	r3, r1, r3
 8003e90:	f04f 0400 	mov.w	r4, #0
 8003e94:	f04f 0500 	mov.w	r5, #0
 8003e98:	00dd      	lsls	r5, r3, #3
 8003e9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e9e:	00d4      	lsls	r4, r2, #3
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	462b      	mov	r3, r5
 8003ea4:	1814      	adds	r4, r2, r0
 8003ea6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ea8:	414b      	adcs	r3, r1
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	008b      	lsls	r3, r1, #2
 8003ec0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ec4:	0082      	lsls	r2, r0, #2
 8003ec6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003eca:	f7fc f9d9 	bl	8000280 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <UART_SetConfig+0x38c>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	; 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	3332      	adds	r3, #50	; 0x32
 8003ee6:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <UART_SetConfig+0x38c>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef2:	441e      	add	r6, r3
 8003ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f04f 0100 	mov.w	r1, #0
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	1894      	adds	r4, r2, r2
 8003f02:	603c      	str	r4, [r7, #0]
 8003f04:	415b      	adcs	r3, r3
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f0c:	1812      	adds	r2, r2, r0
 8003f0e:	eb41 0303 	adc.w	r3, r1, r3
 8003f12:	f04f 0400 	mov.w	r4, #0
 8003f16:	f04f 0500 	mov.w	r5, #0
 8003f1a:	00dd      	lsls	r5, r3, #3
 8003f1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f20:	00d4      	lsls	r4, r2, #3
 8003f22:	4622      	mov	r2, r4
 8003f24:	462b      	mov	r3, r5
 8003f26:	eb12 0a00 	adds.w	sl, r2, r0
 8003f2a:	eb43 0b01 	adc.w	fp, r3, r1
 8003f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	008b      	lsls	r3, r1, #2
 8003f42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f46:	0082      	lsls	r2, r0, #2
 8003f48:	4650      	mov	r0, sl
 8003f4a:	4659      	mov	r1, fp
 8003f4c:	f7fc f998 	bl	8000280 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <UART_SetConfig+0x38c>)
 8003f56:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2164      	movs	r1, #100	; 0x64
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	3332      	adds	r3, #50	; 0x32
 8003f68:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <UART_SetConfig+0x38c>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	f003 020f 	and.w	r2, r3, #15
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4432      	add	r2, r6
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	377c      	adds	r7, #124	; 0x7c
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	40011000 	.word	0x40011000
 8003f8c:	40011400 	.word	0x40011400
 8003f90:	51eb851f 	.word	0x51eb851f

08003f94 <__errno>:
 8003f94:	4b01      	ldr	r3, [pc, #4]	; (8003f9c <__errno+0x8>)
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	2000000c 	.word	0x2000000c

08003fa0 <__libc_init_array>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4d0d      	ldr	r5, [pc, #52]	; (8003fd8 <__libc_init_array+0x38>)
 8003fa4:	4c0d      	ldr	r4, [pc, #52]	; (8003fdc <__libc_init_array+0x3c>)
 8003fa6:	1b64      	subs	r4, r4, r5
 8003fa8:	10a4      	asrs	r4, r4, #2
 8003faa:	2600      	movs	r6, #0
 8003fac:	42a6      	cmp	r6, r4
 8003fae:	d109      	bne.n	8003fc4 <__libc_init_array+0x24>
 8003fb0:	4d0b      	ldr	r5, [pc, #44]	; (8003fe0 <__libc_init_array+0x40>)
 8003fb2:	4c0c      	ldr	r4, [pc, #48]	; (8003fe4 <__libc_init_array+0x44>)
 8003fb4:	f000 fc4e 	bl	8004854 <_init>
 8003fb8:	1b64      	subs	r4, r4, r5
 8003fba:	10a4      	asrs	r4, r4, #2
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	42a6      	cmp	r6, r4
 8003fc0:	d105      	bne.n	8003fce <__libc_init_array+0x2e>
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc8:	4798      	blx	r3
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7ee      	b.n	8003fac <__libc_init_array+0xc>
 8003fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd2:	4798      	blx	r3
 8003fd4:	3601      	adds	r6, #1
 8003fd6:	e7f2      	b.n	8003fbe <__libc_init_array+0x1e>
 8003fd8:	0800494c 	.word	0x0800494c
 8003fdc:	0800494c 	.word	0x0800494c
 8003fe0:	0800494c 	.word	0x0800494c
 8003fe4:	08004950 	.word	0x08004950

08003fe8 <memset>:
 8003fe8:	4402      	add	r2, r0
 8003fea:	4603      	mov	r3, r0
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d100      	bne.n	8003ff2 <memset+0xa>
 8003ff0:	4770      	bx	lr
 8003ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff6:	e7f9      	b.n	8003fec <memset+0x4>

08003ff8 <_free_r>:
 8003ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ffa:	2900      	cmp	r1, #0
 8003ffc:	d048      	beq.n	8004090 <_free_r+0x98>
 8003ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004002:	9001      	str	r0, [sp, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f1a1 0404 	sub.w	r4, r1, #4
 800400a:	bfb8      	it	lt
 800400c:	18e4      	addlt	r4, r4, r3
 800400e:	f000 f8cd 	bl	80041ac <__malloc_lock>
 8004012:	4a20      	ldr	r2, [pc, #128]	; (8004094 <_free_r+0x9c>)
 8004014:	9801      	ldr	r0, [sp, #4]
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	4615      	mov	r5, r2
 800401a:	b933      	cbnz	r3, 800402a <_free_r+0x32>
 800401c:	6063      	str	r3, [r4, #4]
 800401e:	6014      	str	r4, [r2, #0]
 8004020:	b003      	add	sp, #12
 8004022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004026:	f000 b8c7 	b.w	80041b8 <__malloc_unlock>
 800402a:	42a3      	cmp	r3, r4
 800402c:	d90b      	bls.n	8004046 <_free_r+0x4e>
 800402e:	6821      	ldr	r1, [r4, #0]
 8004030:	1862      	adds	r2, r4, r1
 8004032:	4293      	cmp	r3, r2
 8004034:	bf04      	itt	eq
 8004036:	681a      	ldreq	r2, [r3, #0]
 8004038:	685b      	ldreq	r3, [r3, #4]
 800403a:	6063      	str	r3, [r4, #4]
 800403c:	bf04      	itt	eq
 800403e:	1852      	addeq	r2, r2, r1
 8004040:	6022      	streq	r2, [r4, #0]
 8004042:	602c      	str	r4, [r5, #0]
 8004044:	e7ec      	b.n	8004020 <_free_r+0x28>
 8004046:	461a      	mov	r2, r3
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b10b      	cbz	r3, 8004050 <_free_r+0x58>
 800404c:	42a3      	cmp	r3, r4
 800404e:	d9fa      	bls.n	8004046 <_free_r+0x4e>
 8004050:	6811      	ldr	r1, [r2, #0]
 8004052:	1855      	adds	r5, r2, r1
 8004054:	42a5      	cmp	r5, r4
 8004056:	d10b      	bne.n	8004070 <_free_r+0x78>
 8004058:	6824      	ldr	r4, [r4, #0]
 800405a:	4421      	add	r1, r4
 800405c:	1854      	adds	r4, r2, r1
 800405e:	42a3      	cmp	r3, r4
 8004060:	6011      	str	r1, [r2, #0]
 8004062:	d1dd      	bne.n	8004020 <_free_r+0x28>
 8004064:	681c      	ldr	r4, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	6053      	str	r3, [r2, #4]
 800406a:	4421      	add	r1, r4
 800406c:	6011      	str	r1, [r2, #0]
 800406e:	e7d7      	b.n	8004020 <_free_r+0x28>
 8004070:	d902      	bls.n	8004078 <_free_r+0x80>
 8004072:	230c      	movs	r3, #12
 8004074:	6003      	str	r3, [r0, #0]
 8004076:	e7d3      	b.n	8004020 <_free_r+0x28>
 8004078:	6825      	ldr	r5, [r4, #0]
 800407a:	1961      	adds	r1, r4, r5
 800407c:	428b      	cmp	r3, r1
 800407e:	bf04      	itt	eq
 8004080:	6819      	ldreq	r1, [r3, #0]
 8004082:	685b      	ldreq	r3, [r3, #4]
 8004084:	6063      	str	r3, [r4, #4]
 8004086:	bf04      	itt	eq
 8004088:	1949      	addeq	r1, r1, r5
 800408a:	6021      	streq	r1, [r4, #0]
 800408c:	6054      	str	r4, [r2, #4]
 800408e:	e7c7      	b.n	8004020 <_free_r+0x28>
 8004090:	b003      	add	sp, #12
 8004092:	bd30      	pop	{r4, r5, pc}
 8004094:	2000009c 	.word	0x2000009c

08004098 <_malloc_r>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	1ccd      	adds	r5, r1, #3
 800409c:	f025 0503 	bic.w	r5, r5, #3
 80040a0:	3508      	adds	r5, #8
 80040a2:	2d0c      	cmp	r5, #12
 80040a4:	bf38      	it	cc
 80040a6:	250c      	movcc	r5, #12
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	4606      	mov	r6, r0
 80040ac:	db01      	blt.n	80040b2 <_malloc_r+0x1a>
 80040ae:	42a9      	cmp	r1, r5
 80040b0:	d903      	bls.n	80040ba <_malloc_r+0x22>
 80040b2:	230c      	movs	r3, #12
 80040b4:	6033      	str	r3, [r6, #0]
 80040b6:	2000      	movs	r0, #0
 80040b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ba:	f000 f877 	bl	80041ac <__malloc_lock>
 80040be:	4921      	ldr	r1, [pc, #132]	; (8004144 <_malloc_r+0xac>)
 80040c0:	680a      	ldr	r2, [r1, #0]
 80040c2:	4614      	mov	r4, r2
 80040c4:	b99c      	cbnz	r4, 80040ee <_malloc_r+0x56>
 80040c6:	4f20      	ldr	r7, [pc, #128]	; (8004148 <_malloc_r+0xb0>)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b923      	cbnz	r3, 80040d6 <_malloc_r+0x3e>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4630      	mov	r0, r6
 80040d0:	f000 f83c 	bl	800414c <_sbrk_r>
 80040d4:	6038      	str	r0, [r7, #0]
 80040d6:	4629      	mov	r1, r5
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 f837 	bl	800414c <_sbrk_r>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	d123      	bne.n	800412a <_malloc_r+0x92>
 80040e2:	230c      	movs	r3, #12
 80040e4:	6033      	str	r3, [r6, #0]
 80040e6:	4630      	mov	r0, r6
 80040e8:	f000 f866 	bl	80041b8 <__malloc_unlock>
 80040ec:	e7e3      	b.n	80040b6 <_malloc_r+0x1e>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	1b5b      	subs	r3, r3, r5
 80040f2:	d417      	bmi.n	8004124 <_malloc_r+0x8c>
 80040f4:	2b0b      	cmp	r3, #11
 80040f6:	d903      	bls.n	8004100 <_malloc_r+0x68>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	441c      	add	r4, r3
 80040fc:	6025      	str	r5, [r4, #0]
 80040fe:	e004      	b.n	800410a <_malloc_r+0x72>
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	42a2      	cmp	r2, r4
 8004104:	bf0c      	ite	eq
 8004106:	600b      	streq	r3, [r1, #0]
 8004108:	6053      	strne	r3, [r2, #4]
 800410a:	4630      	mov	r0, r6
 800410c:	f000 f854 	bl	80041b8 <__malloc_unlock>
 8004110:	f104 000b 	add.w	r0, r4, #11
 8004114:	1d23      	adds	r3, r4, #4
 8004116:	f020 0007 	bic.w	r0, r0, #7
 800411a:	1ac2      	subs	r2, r0, r3
 800411c:	d0cc      	beq.n	80040b8 <_malloc_r+0x20>
 800411e:	1a1b      	subs	r3, r3, r0
 8004120:	50a3      	str	r3, [r4, r2]
 8004122:	e7c9      	b.n	80040b8 <_malloc_r+0x20>
 8004124:	4622      	mov	r2, r4
 8004126:	6864      	ldr	r4, [r4, #4]
 8004128:	e7cc      	b.n	80040c4 <_malloc_r+0x2c>
 800412a:	1cc4      	adds	r4, r0, #3
 800412c:	f024 0403 	bic.w	r4, r4, #3
 8004130:	42a0      	cmp	r0, r4
 8004132:	d0e3      	beq.n	80040fc <_malloc_r+0x64>
 8004134:	1a21      	subs	r1, r4, r0
 8004136:	4630      	mov	r0, r6
 8004138:	f000 f808 	bl	800414c <_sbrk_r>
 800413c:	3001      	adds	r0, #1
 800413e:	d1dd      	bne.n	80040fc <_malloc_r+0x64>
 8004140:	e7cf      	b.n	80040e2 <_malloc_r+0x4a>
 8004142:	bf00      	nop
 8004144:	2000009c 	.word	0x2000009c
 8004148:	200000a0 	.word	0x200000a0

0800414c <_sbrk_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4d06      	ldr	r5, [pc, #24]	; (8004168 <_sbrk_r+0x1c>)
 8004150:	2300      	movs	r3, #0
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	f7fd faa0 	bl	800169c <_sbrk>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_sbrk_r+0x1a>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_sbrk_r+0x1a>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	2000019c 	.word	0x2000019c

0800416c <siprintf>:
 800416c:	b40e      	push	{r1, r2, r3}
 800416e:	b500      	push	{lr}
 8004170:	b09c      	sub	sp, #112	; 0x70
 8004172:	ab1d      	add	r3, sp, #116	; 0x74
 8004174:	9002      	str	r0, [sp, #8]
 8004176:	9006      	str	r0, [sp, #24]
 8004178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800417c:	4809      	ldr	r0, [pc, #36]	; (80041a4 <siprintf+0x38>)
 800417e:	9107      	str	r1, [sp, #28]
 8004180:	9104      	str	r1, [sp, #16]
 8004182:	4909      	ldr	r1, [pc, #36]	; (80041a8 <siprintf+0x3c>)
 8004184:	f853 2b04 	ldr.w	r2, [r3], #4
 8004188:	9105      	str	r1, [sp, #20]
 800418a:	6800      	ldr	r0, [r0, #0]
 800418c:	9301      	str	r3, [sp, #4]
 800418e:	a902      	add	r1, sp, #8
 8004190:	f000 f874 	bl	800427c <_svfiprintf_r>
 8004194:	9b02      	ldr	r3, [sp, #8]
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	b01c      	add	sp, #112	; 0x70
 800419c:	f85d eb04 	ldr.w	lr, [sp], #4
 80041a0:	b003      	add	sp, #12
 80041a2:	4770      	bx	lr
 80041a4:	2000000c 	.word	0x2000000c
 80041a8:	ffff0208 	.word	0xffff0208

080041ac <__malloc_lock>:
 80041ac:	4801      	ldr	r0, [pc, #4]	; (80041b4 <__malloc_lock+0x8>)
 80041ae:	f000 baf9 	b.w	80047a4 <__retarget_lock_acquire_recursive>
 80041b2:	bf00      	nop
 80041b4:	200001a4 	.word	0x200001a4

080041b8 <__malloc_unlock>:
 80041b8:	4801      	ldr	r0, [pc, #4]	; (80041c0 <__malloc_unlock+0x8>)
 80041ba:	f000 baf4 	b.w	80047a6 <__retarget_lock_release_recursive>
 80041be:	bf00      	nop
 80041c0:	200001a4 	.word	0x200001a4

080041c4 <__ssputs_r>:
 80041c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	688e      	ldr	r6, [r1, #8]
 80041ca:	429e      	cmp	r6, r3
 80041cc:	4682      	mov	sl, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	4690      	mov	r8, r2
 80041d2:	461f      	mov	r7, r3
 80041d4:	d838      	bhi.n	8004248 <__ssputs_r+0x84>
 80041d6:	898a      	ldrh	r2, [r1, #12]
 80041d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041dc:	d032      	beq.n	8004244 <__ssputs_r+0x80>
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	6909      	ldr	r1, [r1, #16]
 80041e2:	eba5 0901 	sub.w	r9, r5, r1
 80041e6:	6965      	ldr	r5, [r4, #20]
 80041e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041f0:	3301      	adds	r3, #1
 80041f2:	444b      	add	r3, r9
 80041f4:	106d      	asrs	r5, r5, #1
 80041f6:	429d      	cmp	r5, r3
 80041f8:	bf38      	it	cc
 80041fa:	461d      	movcc	r5, r3
 80041fc:	0553      	lsls	r3, r2, #21
 80041fe:	d531      	bpl.n	8004264 <__ssputs_r+0xa0>
 8004200:	4629      	mov	r1, r5
 8004202:	f7ff ff49 	bl	8004098 <_malloc_r>
 8004206:	4606      	mov	r6, r0
 8004208:	b950      	cbnz	r0, 8004220 <__ssputs_r+0x5c>
 800420a:	230c      	movs	r3, #12
 800420c:	f8ca 3000 	str.w	r3, [sl]
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004220:	6921      	ldr	r1, [r4, #16]
 8004222:	464a      	mov	r2, r9
 8004224:	f000 fac0 	bl	80047a8 <memcpy>
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004232:	81a3      	strh	r3, [r4, #12]
 8004234:	6126      	str	r6, [r4, #16]
 8004236:	6165      	str	r5, [r4, #20]
 8004238:	444e      	add	r6, r9
 800423a:	eba5 0509 	sub.w	r5, r5, r9
 800423e:	6026      	str	r6, [r4, #0]
 8004240:	60a5      	str	r5, [r4, #8]
 8004242:	463e      	mov	r6, r7
 8004244:	42be      	cmp	r6, r7
 8004246:	d900      	bls.n	800424a <__ssputs_r+0x86>
 8004248:	463e      	mov	r6, r7
 800424a:	4632      	mov	r2, r6
 800424c:	6820      	ldr	r0, [r4, #0]
 800424e:	4641      	mov	r1, r8
 8004250:	f000 fab8 	bl	80047c4 <memmove>
 8004254:	68a3      	ldr	r3, [r4, #8]
 8004256:	6822      	ldr	r2, [r4, #0]
 8004258:	1b9b      	subs	r3, r3, r6
 800425a:	4432      	add	r2, r6
 800425c:	60a3      	str	r3, [r4, #8]
 800425e:	6022      	str	r2, [r4, #0]
 8004260:	2000      	movs	r0, #0
 8004262:	e7db      	b.n	800421c <__ssputs_r+0x58>
 8004264:	462a      	mov	r2, r5
 8004266:	f000 fac7 	bl	80047f8 <_realloc_r>
 800426a:	4606      	mov	r6, r0
 800426c:	2800      	cmp	r0, #0
 800426e:	d1e1      	bne.n	8004234 <__ssputs_r+0x70>
 8004270:	6921      	ldr	r1, [r4, #16]
 8004272:	4650      	mov	r0, sl
 8004274:	f7ff fec0 	bl	8003ff8 <_free_r>
 8004278:	e7c7      	b.n	800420a <__ssputs_r+0x46>
	...

0800427c <_svfiprintf_r>:
 800427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	4698      	mov	r8, r3
 8004282:	898b      	ldrh	r3, [r1, #12]
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	b09d      	sub	sp, #116	; 0x74
 8004288:	4607      	mov	r7, r0
 800428a:	460d      	mov	r5, r1
 800428c:	4614      	mov	r4, r2
 800428e:	d50e      	bpl.n	80042ae <_svfiprintf_r+0x32>
 8004290:	690b      	ldr	r3, [r1, #16]
 8004292:	b963      	cbnz	r3, 80042ae <_svfiprintf_r+0x32>
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	f7ff feff 	bl	8004098 <_malloc_r>
 800429a:	6028      	str	r0, [r5, #0]
 800429c:	6128      	str	r0, [r5, #16]
 800429e:	b920      	cbnz	r0, 80042aa <_svfiprintf_r+0x2e>
 80042a0:	230c      	movs	r3, #12
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	e0d1      	b.n	800444e <_svfiprintf_r+0x1d2>
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	616b      	str	r3, [r5, #20]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9309      	str	r3, [sp, #36]	; 0x24
 80042b2:	2320      	movs	r3, #32
 80042b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80042bc:	2330      	movs	r3, #48	; 0x30
 80042be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004468 <_svfiprintf_r+0x1ec>
 80042c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042c6:	f04f 0901 	mov.w	r9, #1
 80042ca:	4623      	mov	r3, r4
 80042cc:	469a      	mov	sl, r3
 80042ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042d2:	b10a      	cbz	r2, 80042d8 <_svfiprintf_r+0x5c>
 80042d4:	2a25      	cmp	r2, #37	; 0x25
 80042d6:	d1f9      	bne.n	80042cc <_svfiprintf_r+0x50>
 80042d8:	ebba 0b04 	subs.w	fp, sl, r4
 80042dc:	d00b      	beq.n	80042f6 <_svfiprintf_r+0x7a>
 80042de:	465b      	mov	r3, fp
 80042e0:	4622      	mov	r2, r4
 80042e2:	4629      	mov	r1, r5
 80042e4:	4638      	mov	r0, r7
 80042e6:	f7ff ff6d 	bl	80041c4 <__ssputs_r>
 80042ea:	3001      	adds	r0, #1
 80042ec:	f000 80aa 	beq.w	8004444 <_svfiprintf_r+0x1c8>
 80042f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042f2:	445a      	add	r2, fp
 80042f4:	9209      	str	r2, [sp, #36]	; 0x24
 80042f6:	f89a 3000 	ldrb.w	r3, [sl]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80a2 	beq.w	8004444 <_svfiprintf_r+0x1c8>
 8004300:	2300      	movs	r3, #0
 8004302:	f04f 32ff 	mov.w	r2, #4294967295
 8004306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800430a:	f10a 0a01 	add.w	sl, sl, #1
 800430e:	9304      	str	r3, [sp, #16]
 8004310:	9307      	str	r3, [sp, #28]
 8004312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004316:	931a      	str	r3, [sp, #104]	; 0x68
 8004318:	4654      	mov	r4, sl
 800431a:	2205      	movs	r2, #5
 800431c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004320:	4851      	ldr	r0, [pc, #324]	; (8004468 <_svfiprintf_r+0x1ec>)
 8004322:	f7fb ff5d 	bl	80001e0 <memchr>
 8004326:	9a04      	ldr	r2, [sp, #16]
 8004328:	b9d8      	cbnz	r0, 8004362 <_svfiprintf_r+0xe6>
 800432a:	06d0      	lsls	r0, r2, #27
 800432c:	bf44      	itt	mi
 800432e:	2320      	movmi	r3, #32
 8004330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004334:	0711      	lsls	r1, r2, #28
 8004336:	bf44      	itt	mi
 8004338:	232b      	movmi	r3, #43	; 0x2b
 800433a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800433e:	f89a 3000 	ldrb.w	r3, [sl]
 8004342:	2b2a      	cmp	r3, #42	; 0x2a
 8004344:	d015      	beq.n	8004372 <_svfiprintf_r+0xf6>
 8004346:	9a07      	ldr	r2, [sp, #28]
 8004348:	4654      	mov	r4, sl
 800434a:	2000      	movs	r0, #0
 800434c:	f04f 0c0a 	mov.w	ip, #10
 8004350:	4621      	mov	r1, r4
 8004352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004356:	3b30      	subs	r3, #48	; 0x30
 8004358:	2b09      	cmp	r3, #9
 800435a:	d94e      	bls.n	80043fa <_svfiprintf_r+0x17e>
 800435c:	b1b0      	cbz	r0, 800438c <_svfiprintf_r+0x110>
 800435e:	9207      	str	r2, [sp, #28]
 8004360:	e014      	b.n	800438c <_svfiprintf_r+0x110>
 8004362:	eba0 0308 	sub.w	r3, r0, r8
 8004366:	fa09 f303 	lsl.w	r3, r9, r3
 800436a:	4313      	orrs	r3, r2
 800436c:	9304      	str	r3, [sp, #16]
 800436e:	46a2      	mov	sl, r4
 8004370:	e7d2      	b.n	8004318 <_svfiprintf_r+0x9c>
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	1d19      	adds	r1, r3, #4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	9103      	str	r1, [sp, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	bfbb      	ittet	lt
 800437e:	425b      	neglt	r3, r3
 8004380:	f042 0202 	orrlt.w	r2, r2, #2
 8004384:	9307      	strge	r3, [sp, #28]
 8004386:	9307      	strlt	r3, [sp, #28]
 8004388:	bfb8      	it	lt
 800438a:	9204      	strlt	r2, [sp, #16]
 800438c:	7823      	ldrb	r3, [r4, #0]
 800438e:	2b2e      	cmp	r3, #46	; 0x2e
 8004390:	d10c      	bne.n	80043ac <_svfiprintf_r+0x130>
 8004392:	7863      	ldrb	r3, [r4, #1]
 8004394:	2b2a      	cmp	r3, #42	; 0x2a
 8004396:	d135      	bne.n	8004404 <_svfiprintf_r+0x188>
 8004398:	9b03      	ldr	r3, [sp, #12]
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	9203      	str	r2, [sp, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bfb8      	it	lt
 80043a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80043a8:	3402      	adds	r4, #2
 80043aa:	9305      	str	r3, [sp, #20]
 80043ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004478 <_svfiprintf_r+0x1fc>
 80043b0:	7821      	ldrb	r1, [r4, #0]
 80043b2:	2203      	movs	r2, #3
 80043b4:	4650      	mov	r0, sl
 80043b6:	f7fb ff13 	bl	80001e0 <memchr>
 80043ba:	b140      	cbz	r0, 80043ce <_svfiprintf_r+0x152>
 80043bc:	2340      	movs	r3, #64	; 0x40
 80043be:	eba0 000a 	sub.w	r0, r0, sl
 80043c2:	fa03 f000 	lsl.w	r0, r3, r0
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	4303      	orrs	r3, r0
 80043ca:	3401      	adds	r4, #1
 80043cc:	9304      	str	r3, [sp, #16]
 80043ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d2:	4826      	ldr	r0, [pc, #152]	; (800446c <_svfiprintf_r+0x1f0>)
 80043d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043d8:	2206      	movs	r2, #6
 80043da:	f7fb ff01 	bl	80001e0 <memchr>
 80043de:	2800      	cmp	r0, #0
 80043e0:	d038      	beq.n	8004454 <_svfiprintf_r+0x1d8>
 80043e2:	4b23      	ldr	r3, [pc, #140]	; (8004470 <_svfiprintf_r+0x1f4>)
 80043e4:	bb1b      	cbnz	r3, 800442e <_svfiprintf_r+0x1b2>
 80043e6:	9b03      	ldr	r3, [sp, #12]
 80043e8:	3307      	adds	r3, #7
 80043ea:	f023 0307 	bic.w	r3, r3, #7
 80043ee:	3308      	adds	r3, #8
 80043f0:	9303      	str	r3, [sp, #12]
 80043f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f4:	4433      	add	r3, r6
 80043f6:	9309      	str	r3, [sp, #36]	; 0x24
 80043f8:	e767      	b.n	80042ca <_svfiprintf_r+0x4e>
 80043fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80043fe:	460c      	mov	r4, r1
 8004400:	2001      	movs	r0, #1
 8004402:	e7a5      	b.n	8004350 <_svfiprintf_r+0xd4>
 8004404:	2300      	movs	r3, #0
 8004406:	3401      	adds	r4, #1
 8004408:	9305      	str	r3, [sp, #20]
 800440a:	4619      	mov	r1, r3
 800440c:	f04f 0c0a 	mov.w	ip, #10
 8004410:	4620      	mov	r0, r4
 8004412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004416:	3a30      	subs	r2, #48	; 0x30
 8004418:	2a09      	cmp	r2, #9
 800441a:	d903      	bls.n	8004424 <_svfiprintf_r+0x1a8>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0c5      	beq.n	80043ac <_svfiprintf_r+0x130>
 8004420:	9105      	str	r1, [sp, #20]
 8004422:	e7c3      	b.n	80043ac <_svfiprintf_r+0x130>
 8004424:	fb0c 2101 	mla	r1, ip, r1, r2
 8004428:	4604      	mov	r4, r0
 800442a:	2301      	movs	r3, #1
 800442c:	e7f0      	b.n	8004410 <_svfiprintf_r+0x194>
 800442e:	ab03      	add	r3, sp, #12
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	462a      	mov	r2, r5
 8004434:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <_svfiprintf_r+0x1f8>)
 8004436:	a904      	add	r1, sp, #16
 8004438:	4638      	mov	r0, r7
 800443a:	f3af 8000 	nop.w
 800443e:	1c42      	adds	r2, r0, #1
 8004440:	4606      	mov	r6, r0
 8004442:	d1d6      	bne.n	80043f2 <_svfiprintf_r+0x176>
 8004444:	89ab      	ldrh	r3, [r5, #12]
 8004446:	065b      	lsls	r3, r3, #25
 8004448:	f53f af2c 	bmi.w	80042a4 <_svfiprintf_r+0x28>
 800444c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800444e:	b01d      	add	sp, #116	; 0x74
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004454:	ab03      	add	r3, sp, #12
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	462a      	mov	r2, r5
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <_svfiprintf_r+0x1f8>)
 800445c:	a904      	add	r1, sp, #16
 800445e:	4638      	mov	r0, r7
 8004460:	f000 f87a 	bl	8004558 <_printf_i>
 8004464:	e7eb      	b.n	800443e <_svfiprintf_r+0x1c2>
 8004466:	bf00      	nop
 8004468:	08004910 	.word	0x08004910
 800446c:	0800491a 	.word	0x0800491a
 8004470:	00000000 	.word	0x00000000
 8004474:	080041c5 	.word	0x080041c5
 8004478:	08004916 	.word	0x08004916

0800447c <_printf_common>:
 800447c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	4616      	mov	r6, r2
 8004482:	4699      	mov	r9, r3
 8004484:	688a      	ldr	r2, [r1, #8]
 8004486:	690b      	ldr	r3, [r1, #16]
 8004488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800448c:	4293      	cmp	r3, r2
 800448e:	bfb8      	it	lt
 8004490:	4613      	movlt	r3, r2
 8004492:	6033      	str	r3, [r6, #0]
 8004494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004498:	4607      	mov	r7, r0
 800449a:	460c      	mov	r4, r1
 800449c:	b10a      	cbz	r2, 80044a2 <_printf_common+0x26>
 800449e:	3301      	adds	r3, #1
 80044a0:	6033      	str	r3, [r6, #0]
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	0699      	lsls	r1, r3, #26
 80044a6:	bf42      	ittt	mi
 80044a8:	6833      	ldrmi	r3, [r6, #0]
 80044aa:	3302      	addmi	r3, #2
 80044ac:	6033      	strmi	r3, [r6, #0]
 80044ae:	6825      	ldr	r5, [r4, #0]
 80044b0:	f015 0506 	ands.w	r5, r5, #6
 80044b4:	d106      	bne.n	80044c4 <_printf_common+0x48>
 80044b6:	f104 0a19 	add.w	sl, r4, #25
 80044ba:	68e3      	ldr	r3, [r4, #12]
 80044bc:	6832      	ldr	r2, [r6, #0]
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	42ab      	cmp	r3, r5
 80044c2:	dc26      	bgt.n	8004512 <_printf_common+0x96>
 80044c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044c8:	1e13      	subs	r3, r2, #0
 80044ca:	6822      	ldr	r2, [r4, #0]
 80044cc:	bf18      	it	ne
 80044ce:	2301      	movne	r3, #1
 80044d0:	0692      	lsls	r2, r2, #26
 80044d2:	d42b      	bmi.n	800452c <_printf_common+0xb0>
 80044d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044d8:	4649      	mov	r1, r9
 80044da:	4638      	mov	r0, r7
 80044dc:	47c0      	blx	r8
 80044de:	3001      	adds	r0, #1
 80044e0:	d01e      	beq.n	8004520 <_printf_common+0xa4>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	68e5      	ldr	r5, [r4, #12]
 80044e6:	6832      	ldr	r2, [r6, #0]
 80044e8:	f003 0306 	and.w	r3, r3, #6
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	bf08      	it	eq
 80044f0:	1aad      	subeq	r5, r5, r2
 80044f2:	68a3      	ldr	r3, [r4, #8]
 80044f4:	6922      	ldr	r2, [r4, #16]
 80044f6:	bf0c      	ite	eq
 80044f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044fc:	2500      	movne	r5, #0
 80044fe:	4293      	cmp	r3, r2
 8004500:	bfc4      	itt	gt
 8004502:	1a9b      	subgt	r3, r3, r2
 8004504:	18ed      	addgt	r5, r5, r3
 8004506:	2600      	movs	r6, #0
 8004508:	341a      	adds	r4, #26
 800450a:	42b5      	cmp	r5, r6
 800450c:	d11a      	bne.n	8004544 <_printf_common+0xc8>
 800450e:	2000      	movs	r0, #0
 8004510:	e008      	b.n	8004524 <_printf_common+0xa8>
 8004512:	2301      	movs	r3, #1
 8004514:	4652      	mov	r2, sl
 8004516:	4649      	mov	r1, r9
 8004518:	4638      	mov	r0, r7
 800451a:	47c0      	blx	r8
 800451c:	3001      	adds	r0, #1
 800451e:	d103      	bne.n	8004528 <_printf_common+0xac>
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004528:	3501      	adds	r5, #1
 800452a:	e7c6      	b.n	80044ba <_printf_common+0x3e>
 800452c:	18e1      	adds	r1, r4, r3
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	2030      	movs	r0, #48	; 0x30
 8004532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004536:	4422      	add	r2, r4
 8004538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800453c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004540:	3302      	adds	r3, #2
 8004542:	e7c7      	b.n	80044d4 <_printf_common+0x58>
 8004544:	2301      	movs	r3, #1
 8004546:	4622      	mov	r2, r4
 8004548:	4649      	mov	r1, r9
 800454a:	4638      	mov	r0, r7
 800454c:	47c0      	blx	r8
 800454e:	3001      	adds	r0, #1
 8004550:	d0e6      	beq.n	8004520 <_printf_common+0xa4>
 8004552:	3601      	adds	r6, #1
 8004554:	e7d9      	b.n	800450a <_printf_common+0x8e>
	...

08004558 <_printf_i>:
 8004558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	460c      	mov	r4, r1
 800455e:	4691      	mov	r9, r2
 8004560:	7e27      	ldrb	r7, [r4, #24]
 8004562:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004564:	2f78      	cmp	r7, #120	; 0x78
 8004566:	4680      	mov	r8, r0
 8004568:	469a      	mov	sl, r3
 800456a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800456e:	d807      	bhi.n	8004580 <_printf_i+0x28>
 8004570:	2f62      	cmp	r7, #98	; 0x62
 8004572:	d80a      	bhi.n	800458a <_printf_i+0x32>
 8004574:	2f00      	cmp	r7, #0
 8004576:	f000 80d8 	beq.w	800472a <_printf_i+0x1d2>
 800457a:	2f58      	cmp	r7, #88	; 0x58
 800457c:	f000 80a3 	beq.w	80046c6 <_printf_i+0x16e>
 8004580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004588:	e03a      	b.n	8004600 <_printf_i+0xa8>
 800458a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800458e:	2b15      	cmp	r3, #21
 8004590:	d8f6      	bhi.n	8004580 <_printf_i+0x28>
 8004592:	a001      	add	r0, pc, #4	; (adr r0, 8004598 <_printf_i+0x40>)
 8004594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004598:	080045f1 	.word	0x080045f1
 800459c:	08004605 	.word	0x08004605
 80045a0:	08004581 	.word	0x08004581
 80045a4:	08004581 	.word	0x08004581
 80045a8:	08004581 	.word	0x08004581
 80045ac:	08004581 	.word	0x08004581
 80045b0:	08004605 	.word	0x08004605
 80045b4:	08004581 	.word	0x08004581
 80045b8:	08004581 	.word	0x08004581
 80045bc:	08004581 	.word	0x08004581
 80045c0:	08004581 	.word	0x08004581
 80045c4:	08004711 	.word	0x08004711
 80045c8:	08004635 	.word	0x08004635
 80045cc:	080046f3 	.word	0x080046f3
 80045d0:	08004581 	.word	0x08004581
 80045d4:	08004581 	.word	0x08004581
 80045d8:	08004733 	.word	0x08004733
 80045dc:	08004581 	.word	0x08004581
 80045e0:	08004635 	.word	0x08004635
 80045e4:	08004581 	.word	0x08004581
 80045e8:	08004581 	.word	0x08004581
 80045ec:	080046fb 	.word	0x080046fb
 80045f0:	680b      	ldr	r3, [r1, #0]
 80045f2:	1d1a      	adds	r2, r3, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	600a      	str	r2, [r1, #0]
 80045f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004600:	2301      	movs	r3, #1
 8004602:	e0a3      	b.n	800474c <_printf_i+0x1f4>
 8004604:	6825      	ldr	r5, [r4, #0]
 8004606:	6808      	ldr	r0, [r1, #0]
 8004608:	062e      	lsls	r6, r5, #24
 800460a:	f100 0304 	add.w	r3, r0, #4
 800460e:	d50a      	bpl.n	8004626 <_printf_i+0xce>
 8004610:	6805      	ldr	r5, [r0, #0]
 8004612:	600b      	str	r3, [r1, #0]
 8004614:	2d00      	cmp	r5, #0
 8004616:	da03      	bge.n	8004620 <_printf_i+0xc8>
 8004618:	232d      	movs	r3, #45	; 0x2d
 800461a:	426d      	negs	r5, r5
 800461c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004620:	485e      	ldr	r0, [pc, #376]	; (800479c <_printf_i+0x244>)
 8004622:	230a      	movs	r3, #10
 8004624:	e019      	b.n	800465a <_printf_i+0x102>
 8004626:	f015 0f40 	tst.w	r5, #64	; 0x40
 800462a:	6805      	ldr	r5, [r0, #0]
 800462c:	600b      	str	r3, [r1, #0]
 800462e:	bf18      	it	ne
 8004630:	b22d      	sxthne	r5, r5
 8004632:	e7ef      	b.n	8004614 <_printf_i+0xbc>
 8004634:	680b      	ldr	r3, [r1, #0]
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	1d18      	adds	r0, r3, #4
 800463a:	6008      	str	r0, [r1, #0]
 800463c:	0628      	lsls	r0, r5, #24
 800463e:	d501      	bpl.n	8004644 <_printf_i+0xec>
 8004640:	681d      	ldr	r5, [r3, #0]
 8004642:	e002      	b.n	800464a <_printf_i+0xf2>
 8004644:	0669      	lsls	r1, r5, #25
 8004646:	d5fb      	bpl.n	8004640 <_printf_i+0xe8>
 8004648:	881d      	ldrh	r5, [r3, #0]
 800464a:	4854      	ldr	r0, [pc, #336]	; (800479c <_printf_i+0x244>)
 800464c:	2f6f      	cmp	r7, #111	; 0x6f
 800464e:	bf0c      	ite	eq
 8004650:	2308      	moveq	r3, #8
 8004652:	230a      	movne	r3, #10
 8004654:	2100      	movs	r1, #0
 8004656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800465a:	6866      	ldr	r6, [r4, #4]
 800465c:	60a6      	str	r6, [r4, #8]
 800465e:	2e00      	cmp	r6, #0
 8004660:	bfa2      	ittt	ge
 8004662:	6821      	ldrge	r1, [r4, #0]
 8004664:	f021 0104 	bicge.w	r1, r1, #4
 8004668:	6021      	strge	r1, [r4, #0]
 800466a:	b90d      	cbnz	r5, 8004670 <_printf_i+0x118>
 800466c:	2e00      	cmp	r6, #0
 800466e:	d04d      	beq.n	800470c <_printf_i+0x1b4>
 8004670:	4616      	mov	r6, r2
 8004672:	fbb5 f1f3 	udiv	r1, r5, r3
 8004676:	fb03 5711 	mls	r7, r3, r1, r5
 800467a:	5dc7      	ldrb	r7, [r0, r7]
 800467c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004680:	462f      	mov	r7, r5
 8004682:	42bb      	cmp	r3, r7
 8004684:	460d      	mov	r5, r1
 8004686:	d9f4      	bls.n	8004672 <_printf_i+0x11a>
 8004688:	2b08      	cmp	r3, #8
 800468a:	d10b      	bne.n	80046a4 <_printf_i+0x14c>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	07df      	lsls	r7, r3, #31
 8004690:	d508      	bpl.n	80046a4 <_printf_i+0x14c>
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	6861      	ldr	r1, [r4, #4]
 8004696:	4299      	cmp	r1, r3
 8004698:	bfde      	ittt	le
 800469a:	2330      	movle	r3, #48	; 0x30
 800469c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046a4:	1b92      	subs	r2, r2, r6
 80046a6:	6122      	str	r2, [r4, #16]
 80046a8:	f8cd a000 	str.w	sl, [sp]
 80046ac:	464b      	mov	r3, r9
 80046ae:	aa03      	add	r2, sp, #12
 80046b0:	4621      	mov	r1, r4
 80046b2:	4640      	mov	r0, r8
 80046b4:	f7ff fee2 	bl	800447c <_printf_common>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d14c      	bne.n	8004756 <_printf_i+0x1fe>
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	b004      	add	sp, #16
 80046c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c6:	4835      	ldr	r0, [pc, #212]	; (800479c <_printf_i+0x244>)
 80046c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	680e      	ldr	r6, [r1, #0]
 80046d0:	061f      	lsls	r7, r3, #24
 80046d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80046d6:	600e      	str	r6, [r1, #0]
 80046d8:	d514      	bpl.n	8004704 <_printf_i+0x1ac>
 80046da:	07d9      	lsls	r1, r3, #31
 80046dc:	bf44      	itt	mi
 80046de:	f043 0320 	orrmi.w	r3, r3, #32
 80046e2:	6023      	strmi	r3, [r4, #0]
 80046e4:	b91d      	cbnz	r5, 80046ee <_printf_i+0x196>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	f023 0320 	bic.w	r3, r3, #32
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	2310      	movs	r3, #16
 80046f0:	e7b0      	b.n	8004654 <_printf_i+0xfc>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	f043 0320 	orr.w	r3, r3, #32
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	2378      	movs	r3, #120	; 0x78
 80046fc:	4828      	ldr	r0, [pc, #160]	; (80047a0 <_printf_i+0x248>)
 80046fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004702:	e7e3      	b.n	80046cc <_printf_i+0x174>
 8004704:	065e      	lsls	r6, r3, #25
 8004706:	bf48      	it	mi
 8004708:	b2ad      	uxthmi	r5, r5
 800470a:	e7e6      	b.n	80046da <_printf_i+0x182>
 800470c:	4616      	mov	r6, r2
 800470e:	e7bb      	b.n	8004688 <_printf_i+0x130>
 8004710:	680b      	ldr	r3, [r1, #0]
 8004712:	6826      	ldr	r6, [r4, #0]
 8004714:	6960      	ldr	r0, [r4, #20]
 8004716:	1d1d      	adds	r5, r3, #4
 8004718:	600d      	str	r5, [r1, #0]
 800471a:	0635      	lsls	r5, r6, #24
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	d501      	bpl.n	8004724 <_printf_i+0x1cc>
 8004720:	6018      	str	r0, [r3, #0]
 8004722:	e002      	b.n	800472a <_printf_i+0x1d2>
 8004724:	0671      	lsls	r1, r6, #25
 8004726:	d5fb      	bpl.n	8004720 <_printf_i+0x1c8>
 8004728:	8018      	strh	r0, [r3, #0]
 800472a:	2300      	movs	r3, #0
 800472c:	6123      	str	r3, [r4, #16]
 800472e:	4616      	mov	r6, r2
 8004730:	e7ba      	b.n	80046a8 <_printf_i+0x150>
 8004732:	680b      	ldr	r3, [r1, #0]
 8004734:	1d1a      	adds	r2, r3, #4
 8004736:	600a      	str	r2, [r1, #0]
 8004738:	681e      	ldr	r6, [r3, #0]
 800473a:	6862      	ldr	r2, [r4, #4]
 800473c:	2100      	movs	r1, #0
 800473e:	4630      	mov	r0, r6
 8004740:	f7fb fd4e 	bl	80001e0 <memchr>
 8004744:	b108      	cbz	r0, 800474a <_printf_i+0x1f2>
 8004746:	1b80      	subs	r0, r0, r6
 8004748:	6060      	str	r0, [r4, #4]
 800474a:	6863      	ldr	r3, [r4, #4]
 800474c:	6123      	str	r3, [r4, #16]
 800474e:	2300      	movs	r3, #0
 8004750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004754:	e7a8      	b.n	80046a8 <_printf_i+0x150>
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	4632      	mov	r2, r6
 800475a:	4649      	mov	r1, r9
 800475c:	4640      	mov	r0, r8
 800475e:	47d0      	blx	sl
 8004760:	3001      	adds	r0, #1
 8004762:	d0ab      	beq.n	80046bc <_printf_i+0x164>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	079b      	lsls	r3, r3, #30
 8004768:	d413      	bmi.n	8004792 <_printf_i+0x23a>
 800476a:	68e0      	ldr	r0, [r4, #12]
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	4298      	cmp	r0, r3
 8004770:	bfb8      	it	lt
 8004772:	4618      	movlt	r0, r3
 8004774:	e7a4      	b.n	80046c0 <_printf_i+0x168>
 8004776:	2301      	movs	r3, #1
 8004778:	4632      	mov	r2, r6
 800477a:	4649      	mov	r1, r9
 800477c:	4640      	mov	r0, r8
 800477e:	47d0      	blx	sl
 8004780:	3001      	adds	r0, #1
 8004782:	d09b      	beq.n	80046bc <_printf_i+0x164>
 8004784:	3501      	adds	r5, #1
 8004786:	68e3      	ldr	r3, [r4, #12]
 8004788:	9903      	ldr	r1, [sp, #12]
 800478a:	1a5b      	subs	r3, r3, r1
 800478c:	42ab      	cmp	r3, r5
 800478e:	dcf2      	bgt.n	8004776 <_printf_i+0x21e>
 8004790:	e7eb      	b.n	800476a <_printf_i+0x212>
 8004792:	2500      	movs	r5, #0
 8004794:	f104 0619 	add.w	r6, r4, #25
 8004798:	e7f5      	b.n	8004786 <_printf_i+0x22e>
 800479a:	bf00      	nop
 800479c:	08004921 	.word	0x08004921
 80047a0:	08004932 	.word	0x08004932

080047a4 <__retarget_lock_acquire_recursive>:
 80047a4:	4770      	bx	lr

080047a6 <__retarget_lock_release_recursive>:
 80047a6:	4770      	bx	lr

080047a8 <memcpy>:
 80047a8:	440a      	add	r2, r1
 80047aa:	4291      	cmp	r1, r2
 80047ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80047b0:	d100      	bne.n	80047b4 <memcpy+0xc>
 80047b2:	4770      	bx	lr
 80047b4:	b510      	push	{r4, lr}
 80047b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047be:	4291      	cmp	r1, r2
 80047c0:	d1f9      	bne.n	80047b6 <memcpy+0xe>
 80047c2:	bd10      	pop	{r4, pc}

080047c4 <memmove>:
 80047c4:	4288      	cmp	r0, r1
 80047c6:	b510      	push	{r4, lr}
 80047c8:	eb01 0402 	add.w	r4, r1, r2
 80047cc:	d902      	bls.n	80047d4 <memmove+0x10>
 80047ce:	4284      	cmp	r4, r0
 80047d0:	4623      	mov	r3, r4
 80047d2:	d807      	bhi.n	80047e4 <memmove+0x20>
 80047d4:	1e43      	subs	r3, r0, #1
 80047d6:	42a1      	cmp	r1, r4
 80047d8:	d008      	beq.n	80047ec <memmove+0x28>
 80047da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047e2:	e7f8      	b.n	80047d6 <memmove+0x12>
 80047e4:	4402      	add	r2, r0
 80047e6:	4601      	mov	r1, r0
 80047e8:	428a      	cmp	r2, r1
 80047ea:	d100      	bne.n	80047ee <memmove+0x2a>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047f6:	e7f7      	b.n	80047e8 <memmove+0x24>

080047f8 <_realloc_r>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	4607      	mov	r7, r0
 80047fc:	4614      	mov	r4, r2
 80047fe:	460e      	mov	r6, r1
 8004800:	b921      	cbnz	r1, 800480c <_realloc_r+0x14>
 8004802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004806:	4611      	mov	r1, r2
 8004808:	f7ff bc46 	b.w	8004098 <_malloc_r>
 800480c:	b922      	cbnz	r2, 8004818 <_realloc_r+0x20>
 800480e:	f7ff fbf3 	bl	8003ff8 <_free_r>
 8004812:	4625      	mov	r5, r4
 8004814:	4628      	mov	r0, r5
 8004816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004818:	f000 f814 	bl	8004844 <_malloc_usable_size_r>
 800481c:	42a0      	cmp	r0, r4
 800481e:	d20f      	bcs.n	8004840 <_realloc_r+0x48>
 8004820:	4621      	mov	r1, r4
 8004822:	4638      	mov	r0, r7
 8004824:	f7ff fc38 	bl	8004098 <_malloc_r>
 8004828:	4605      	mov	r5, r0
 800482a:	2800      	cmp	r0, #0
 800482c:	d0f2      	beq.n	8004814 <_realloc_r+0x1c>
 800482e:	4631      	mov	r1, r6
 8004830:	4622      	mov	r2, r4
 8004832:	f7ff ffb9 	bl	80047a8 <memcpy>
 8004836:	4631      	mov	r1, r6
 8004838:	4638      	mov	r0, r7
 800483a:	f7ff fbdd 	bl	8003ff8 <_free_r>
 800483e:	e7e9      	b.n	8004814 <_realloc_r+0x1c>
 8004840:	4635      	mov	r5, r6
 8004842:	e7e7      	b.n	8004814 <_realloc_r+0x1c>

08004844 <_malloc_usable_size_r>:
 8004844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004848:	1f18      	subs	r0, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfbc      	itt	lt
 800484e:	580b      	ldrlt	r3, [r1, r0]
 8004850:	18c0      	addlt	r0, r0, r3
 8004852:	4770      	bx	lr

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
